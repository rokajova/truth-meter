[{"C:\\Dokumentai\\Projektai\\truthmeter\\truth-meter\\src\\index.js":"1","C:\\Dokumentai\\Projektai\\truthmeter\\truth-meter\\src\\App.js":"2","C:\\Dokumentai\\Projektai\\truthmeter\\truth-meter\\src\\reportWebVitals.js":"3","C:\\Dokumentai\\Projektai\\truthmeter\\truth-meter\\src\\Component\\RouterManager\\RouterManager.js":"4","C:\\Dokumentai\\Projektai\\truthmeter\\truth-meter\\src\\Component\\Header\\Header.js":"5","C:\\Dokumentai\\Projektai\\truthmeter\\truth-meter\\src\\Component\\Main\\Main.js":"6","C:\\Dokumentai\\Projektai\\truthmeter\\truth-meter\\src\\Component\\PostCard\\PostCard.js":"7","C:\\Dokumentai\\Projektai\\truthmeter\\truth-meter\\src\\Config\\firebase.js":"8","C:\\Dokumentai\\Projektai\\truthmeter\\truth-meter\\src\\Component\\ViewPost\\ViewPost.js":"9","C:\\Dokumentai\\Projektai\\truthmeter\\truth-meter\\src\\Component\\NewPost\\NewPost.js":"10","C:\\Dokumentai\\Projektai\\truthmeter\\truth-meter\\src\\Config\\firebase-redux.js":"11","C:\\Dokumentai\\Projektai\\truthmeter\\truth-meter\\src\\Component\\Login\\Login.js":"12","C:\\Dokumentai\\Projektai\\truthmeter\\truth-meter\\src\\Component\\RatePost\\RatePost.js":"13","C:\\Dokumentai\\Projektai\\truthmeter\\truth-meter\\src\\Component\\Profile\\Profile.js":"14","C:\\Dokumentai\\Projektai\\truthmeter\\truth-meter\\src\\Component\\Search\\Search.js":"15","C:\\Dokumentai\\Projektai\\truthmeter\\truth-meter\\src\\Component\\Search\\Autocomplete.js":"16"},{"size":547,"mtime":1614244528635,"results":"17","hashOfConfig":"18"},{"size":652,"mtime":1613395085796,"results":"19","hashOfConfig":"18"},{"size":362,"mtime":499162500000,"results":"20","hashOfConfig":"18"},{"size":2129,"mtime":1615768959319,"results":"21","hashOfConfig":"18"},{"size":2893,"mtime":1615908397682,"results":"22","hashOfConfig":"18"},{"size":3275,"mtime":1615822944858,"results":"23","hashOfConfig":"18"},{"size":1579,"mtime":1615951387574,"results":"24","hashOfConfig":"18"},{"size":496,"mtime":1609138412025,"results":"25","hashOfConfig":"18"},{"size":2844,"mtime":1615394723525,"results":"26","hashOfConfig":"18"},{"size":4211,"mtime":1615107785209,"results":"27","hashOfConfig":"18"},{"size":621,"mtime":1609154760951,"results":"28","hashOfConfig":"18"},{"size":4507,"mtime":1614245677960,"results":"29","hashOfConfig":"18"},{"size":5005,"mtime":1615951329654,"results":"30","hashOfConfig":"18"},{"size":1446,"mtime":1615840112505,"results":"31","hashOfConfig":"18"},{"size":1202,"mtime":1615950764974,"results":"32","hashOfConfig":"18"},{"size":1804,"mtime":1615814464535,"results":"33","hashOfConfig":"18"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},"4djakx",{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"36"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"36"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"36"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"36"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},"C:\\Dokumentai\\Projektai\\truthmeter\\truth-meter\\src\\index.js",[],["71","72"],"C:\\Dokumentai\\Projektai\\truthmeter\\truth-meter\\src\\App.js",[],"C:\\Dokumentai\\Projektai\\truthmeter\\truth-meter\\src\\reportWebVitals.js",[],"C:\\Dokumentai\\Projektai\\truthmeter\\truth-meter\\src\\Component\\RouterManager\\RouterManager.js",[],"C:\\Dokumentai\\Projektai\\truthmeter\\truth-meter\\src\\Component\\Header\\Header.js",["73","74","75","76","77"],"import React, { Component } from \"react\";\r\nimport {\r\n  Navbar,\r\n  Nav,\r\n  NavDropdown,\r\n  Form,\r\n  FormControl,\r\n  Button,\r\n} from \"react-bootstrap\";\r\nimport { connect } from \"react-redux\";\r\nimport firebase from \"../../Config/firebase\";\r\nimport { Link, withRouter } from \"react-router-dom\";\r\nimport classes from \"./Header.module.css\";\r\nimport Search from \"../Search/Search\";\r\n\r\nclass Header extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      isOpen: false,\r\n    };\r\n  }\r\n\r\n  //THIS IS GOING TO BE USED FOR ADMINISTRATOR FUNCTIONS\r\n  // componentDidUpdate(nextProps, nextContext) {\r\n  //   if (!nextProps.auth.isEmpty) {\r\n  //     firebase\r\n  //       .auth()\r\n  //       .currentUser.getIdTokenResult()\r\n  //       .then((claim) => {\r\n  //         console.log(claim);\r\n  //       });\r\n  //   }\r\n  // }\r\n\r\n  toggle = () => {\r\n    this.setState({\r\n      isOpen: !this.state.isOpen,\r\n    });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <Navbar bg=\"dark\" expand=\"lg\">\r\n        <Link to={{ pathname: \"/\" }}>\r\n          {\" \"}\r\n          <Navbar.Brand className=\"text-white\">TruthMeter</Navbar.Brand>\r\n        </Link>\r\n        <Search />\r\n\r\n        <Navbar.Toggle className=\"ml-auto\" aria-controls=\"basic-navbar-nav\" />\r\n\r\n        <Navbar.Collapse id=\"basic-navbar-nav\">\r\n          {this.props.auth.isEmpty ? (\r\n            <Nav className=\"ml-auto \">\r\n              <Nav.Link>\r\n                <Link to=\"/login\">\r\n                  {\" \"}\r\n                  &nbsp; <i className=\"fas fa-user\" /> LOG IN/SIGN UP\r\n                </Link>\r\n              </Nav.Link>\r\n\r\n              <Nav.Link>\r\n                &nbsp; <i className=\"fas fa-info\" /> INFO\r\n              </Nav.Link>\r\n            </Nav>\r\n          ) : (\r\n            <Nav className=\"ml-auto\">\r\n              <Nav.Link>\r\n                <Link to=\"/new-post\">\r\n                  {\" \"}\r\n                  &nbsp; <i className=\"fas fa-plus\" />\r\n                  NEW POST\r\n                </Link>\r\n              </Nav.Link>\r\n              <Nav.Link>\r\n                {\" \"}\r\n                &nbsp; <i className=\"fas fa-info\" />\r\n                INFO\r\n              </Nav.Link>\r\n              <Nav.Link>\r\n                <Link to=\"/profile\">\r\n                  {\" \"}\r\n                  &nbsp; <i className=\"fas fa-user\" />\r\n                  PROFILE\r\n                </Link>\r\n              </Nav.Link>\r\n              <Nav.Link\r\n                onClick={() => {\r\n                  firebase.auth().signOut();\r\n                }}\r\n              >\r\n                {\" \"}\r\n                &nbsp; <i className=\"fas fa-minus\" />\r\n                LOG OUT\r\n              </Nav.Link>\r\n            </Nav>\r\n          )}\r\n        </Navbar.Collapse>\r\n      </Navbar>\r\n    );\r\n  }\r\n}\r\n\r\nconst enhance = connect(({ firebase: { auth, profile } }) => ({\r\n  auth,\r\n  profile,\r\n}));\r\n\r\nexport default enhance(withRouter(Header));\r\n","C:\\Dokumentai\\Projektai\\truthmeter\\truth-meter\\src\\Component\\Main\\Main.js",["78"],"import React, { Component } from \"react\";\r\nimport { Container, Spinner } from \"react-bootstrap\";\r\nimport PostCard from \"../PostCard/PostCard\";\r\nimport firebase from \"../../Config/firebase\";\r\nimport classes from \"./Main.module.css\";\r\n\r\nconst db = firebase.firestore();\r\n\r\nclass Main extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.myDiv = React.createRef();\r\n    this.state = {\r\n      lastPost: null,\r\n      isLoaded: false,\r\n      posts: [],\r\n      showLoading: false,\r\n    };\r\n  }\r\n\r\n  nextPost = () => {\r\n    this.setState({ showLoading: true });\r\n    db.collection(\"Posts\")\r\n      .orderBy(\"createDate\", \"desc\")\r\n      .startAfter(this.state.lastPost.createDate)\r\n      .limit(5)\r\n      .get()\r\n      .then((docs) => {\r\n        if (!docs.empty) {\r\n          let allPosts = [];\r\n          docs.forEach(function (doc) {\r\n            const post = { id: doc.id, ...doc.data() };\r\n            allPosts.push(post);\r\n          });\r\n\r\n          let updated_posts = this.state.posts.concat(allPosts);\r\n          this.setState(\r\n            {\r\n              posts: updated_posts,\r\n            },\r\n            () => {\r\n              this.setState({\r\n                isLoaded: true,\r\n                lastPost: this.state.posts[this.state.posts.length - 1],\r\n              });\r\n            }\r\n          );\r\n        }\r\n        this.setState({ showLoading: false });\r\n      });\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.getMyPosts();\r\n  }\r\n\r\n  // Populate posts array with firebase data, onSnapshot allows real time rendering\r\n  getMyPosts = () => {\r\n    db.collection(\"Posts\")\r\n      .orderBy(\"createDate\", \"desc\")\r\n      .limit(10)\r\n      .onSnapshot((docs) => {\r\n        if (!docs.empty) {\r\n          let allPosts = [];\r\n          docs.forEach(function (doc) {\r\n            const post = {\r\n              id: doc.id,\r\n              ...doc.data(),\r\n            };\r\n            allPosts.push(post);\r\n          });\r\n          this.setState(\r\n            {\r\n              posts: allPosts,\r\n            },\r\n            () => {\r\n              this.setState({\r\n                isLoaded: true,\r\n                lastPost: this.state.posts[this.state.posts.length - 1],\r\n              });\r\n            }\r\n          );\r\n        }\r\n      });\r\n  };\r\n\r\n  handleLoadMore = () => {\r\n    this.getMyPosts();\r\n  };\r\n\r\n  handleScroll = () => {\r\n    let triggerHeight =\r\n      this.myDiv.current.scrollTop + this.myDiv.current.offsetHeight;\r\n    if (triggerHeight >= this.myDiv.current.scrollHeight) {\r\n      this.nextPost();\r\n    }\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <div\r\n          className={classes.Container}\r\n          onScroll={() => this.handleScroll()}\r\n          ref={this.myDiv}\r\n        >\r\n          {\" \"}\r\n          {/* Once the posts array is populated, return the elements in the array as PostCard component with props */}\r\n          {this.state.isLoaded &&\r\n            this.state.posts.map((post, index) => {\r\n              return <PostCard key={index} data={post} />;\r\n            })}\r\n        </div>\r\n        {this.state.showLoading ? (\r\n          <div className={classes.Loading}>\r\n            <Spinner animation=\"grow\" />\r\n          </div>\r\n        ) : (\r\n          \"\"\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Main;\r\n","C:\\Dokumentai\\Projektai\\truthmeter\\truth-meter\\src\\Component\\PostCard\\PostCard.js",["79"],"C:\\Dokumentai\\Projektai\\truthmeter\\truth-meter\\src\\Config\\firebase.js",[],"C:\\Dokumentai\\Projektai\\truthmeter\\truth-meter\\src\\Component\\ViewPost\\ViewPost.js",["80"],"import React, { Component } from \"react\";\r\nimport { withRouter } from \"react-router-dom\";\r\nimport { Collapse, Button } from \"react-bootstrap\";\r\nimport firebase from \"../../Config/firebase\";\r\n\r\nconst db = firebase.firestore();\r\n\r\nclass ViewPost extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      post: {},\r\n      isLoaded: false,\r\n      infoOpen: false,\r\n    };\r\n  }\r\n\r\n  //If state is defined, populate post state with post data from this.props.location.state.post, set isLoaded to true.\r\n  //If state is not defined, run getPostByID function passing post id\r\n  componentDidMount() {\r\n    this.getPostByID(this.props.match.params.id);\r\n  }\r\n\r\n  // Convert createDate timestamp to string with result being YYYY/MM/DD HH:MM:SS\r\n  timeStampToString = (ts) => {\r\n    const date = new Date(ts * 1000);\r\n    return (\r\n      date.getFullYear() +\r\n      \"/\" +\r\n      (date.getMonth() + 1) +\r\n      \"/\" +\r\n      date.getDate() +\r\n      \" \" +\r\n      (date.getHours() < 10 ? \"0\" : \"\") +\r\n      date.getHours() +\r\n      \":\" +\r\n      (date.getMinutes() < 10 ? \"0\" : \"\") +\r\n      date.getMinutes() +\r\n      \":\" +\r\n      (date.getSeconds() < 10 ? \"0\" : \"\") +\r\n      date.getSeconds()\r\n    );\r\n  };\r\n\r\n  // get article from Posts collection in firestore, set article state with data\r\n  getPostByID = (postid) => {\r\n    db.collection(\"Posts\")\r\n      .doc(postid)\r\n      // do i need to use onSnapshot here, if im migrating GaugeChart to RatePost component?\r\n      .onSnapshot((doc) => {\r\n        if (doc.exists) {\r\n          this.setState(\r\n            {\r\n              post: doc.data(),\r\n            },\r\n            () => {\r\n              this.setState({\r\n                isLoaded: true,\r\n              });\r\n            }\r\n          );\r\n        } else {\r\n          this.props.history.push({ pathname: \"/\" });\r\n        }\r\n      });\r\n  };\r\n\r\n  render() {\r\n    if (this.state.isLoaded) {\r\n      return (\r\n        <div style={{ border: \"1px solid black\" }}>\r\n          <div>\r\n            <p style={{ display: \"inline-block\" }}>{this.state.post.link}</p>\r\n            <Button\r\n              style={{ display: \"inline-block\" }}\r\n              onClick={() => this.setState({ infoOpen: !this.state.infoOpen })}\r\n              aria-controls=\"example-collapse-text\"\r\n              aria-expanded={this.state.infoOpen}\r\n            ></Button>\r\n            <Collapse in={this.state.infoOpen}>\r\n              <div id=\"example-collapse-text\">info here</div>\r\n            </Collapse>\r\n          </div>\r\n\r\n          <iframe\r\n            src={this.state.post.link}\r\n            style={{\r\n              width: \"100%\",\r\n              height: \"80vh\",\r\n              border: \"none\",\r\n            }}\r\n          />\r\n        </div>\r\n      );\r\n    } else {\r\n      return <div>Loading</div>;\r\n    }\r\n  }\r\n}\r\n\r\nexport default withRouter(ViewPost);\r\n","C:\\Dokumentai\\Projektai\\truthmeter\\truth-meter\\src\\Component\\NewPost\\NewPost.js",[],"C:\\Dokumentai\\Projektai\\truthmeter\\truth-meter\\src\\Config\\firebase-redux.js",[],"C:\\Dokumentai\\Projektai\\truthmeter\\truth-meter\\src\\Component\\Login\\Login.js",["81","82","83","84"],"import React, { useState, useEffect } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport StyledFirebaseAuth from \"react-firebaseui/StyledFirebaseAuth\";\r\nimport firebase from \"../../Config/firebase\";\r\nimport classes from \"./Login.module.css\";\r\n\r\nconst Login = () => {\r\n  // required states for authentication\r\n  const [user, setUser] = useState(\"\");\r\n  const [email, setEmail] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n  const [emailError, setEmailError] = useState(\"\");\r\n  const [passwordError, setPasswordError] = useState(\"\");\r\n  const [hasAccount, setHasAccount] = useState(false);\r\n\r\n  // config for google authentication\r\n  const uiConfig = {\r\n    signInFlow: \"popup\",\r\n    signInSuccessUrl: \"/\",\r\n    signInOptions: [firebase.auth.GoogleAuthProvider.PROVIDER_ID],\r\n  };\r\n\r\n  // clears login and signin state\r\n  const clearInputs = () => {\r\n    setEmail(\"\");\r\n    setPassword(\"\");\r\n  };\r\n\r\n  // clears errors state\r\n  const clearErrors = () => {\r\n    setEmailError(\"\");\r\n    setPasswordError(\"\");\r\n  };\r\n\r\n  // signs in with existing user if there are no errors described in the switch statement\r\n  // if there are errors, set state with the corresponding error\r\n  const handleLogin = () => {\r\n    clearErrors();\r\n    firebase\r\n      .auth()\r\n      .signInWithEmailAndPassword(email, password)\r\n      .catch((err) => {\r\n        switch (err.code) {\r\n          case \"auth/invalid-email\":\r\n          case \"auth/user-disabled\":\r\n          case \"auth/user-not-found\":\r\n            setEmailError(err.message);\r\n            break;\r\n          case \"auth/wrong-password\":\r\n            setPasswordError(err.message);\r\n            break;\r\n        }\r\n      });\r\n  };\r\n\r\n  // signs up a new user if there are no errors described in the switch statement\r\n  // if there are errors, set state with the corresponding error\r\n  const handleSignup = () => {\r\n    clearErrors();\r\n    firebase\r\n      .auth()\r\n      .createUserWithEmailAndPassword(email, password)\r\n      .catch((err) => {\r\n        switch (err.code) {\r\n          case \"auth/email-already-in-use\":\r\n          case \"auth/invalid-email\":\r\n            setEmailError(err.message);\r\n            break;\r\n          case \"auth/weak-password\":\r\n            setPasswordError(err.message);\r\n            break;\r\n        }\r\n      });\r\n  };\r\n\r\n  // sign out user, this is being used in the Header\r\n  // const handleLogout = () => {\r\n  //   firebase.auth().signOut();\r\n  // };\r\n\r\n  // checks for auth state changes, set state accordingly\r\n  const authListener = () => {\r\n    firebase.auth().onAuthStateChanged((user) => {\r\n      if (user) {\r\n        clearInputs();\r\n        setUser(user);\r\n      } else {\r\n        setUser(\"\");\r\n      }\r\n    });\r\n  };\r\n\r\n  // this hook is ran on every render\r\n  useEffect(() => {\r\n    authListener();\r\n  }, []);\r\n\r\n  return (\r\n    <section className={classes.login}>\r\n      <div className={classes.loginContainer}>\r\n        <label>UserName</label>\r\n        <input\r\n          type=\"text\"\r\n          autoFocus\r\n          required\r\n          value={email}\r\n          onChange={(e) => setEmail(e.target.value)}\r\n        />\r\n        <p className={classes.errorMsg}>{emailError}</p>\r\n        <label>Password</label>\r\n        <input\r\n          type=\"password\"\r\n          required\r\n          value={password}\r\n          onChange={(e) => setPassword(e.target.value)}\r\n        />\r\n        <p className={classes.errorMsg}>{passwordError}</p>\r\n        <div className={classes.btnContainer}>\r\n          {\" \"}\r\n          {hasAccount ? (\r\n            <div>\r\n              <button className={classes.button} onClick={handleLogin}>\r\n                Sign In\r\n              </button>\r\n              <p>\r\n                Don't have an account?\r\n                <span onClick={() => setHasAccount(!hasAccount)}>Sign Up</span>\r\n              </p>\r\n            </div>\r\n          ) : (\r\n            <div>\r\n              <button className={classes.button} onClick={handleSignup}>\r\n                Sign Up\r\n              </button>\r\n              <p>\r\n                Have an account?\r\n                <span onClick={() => setHasAccount(!hasAccount)}>Sign In</span>\r\n              </p>\r\n            </div>\r\n          )}{\" \"}\r\n          <StyledFirebaseAuth\r\n            uiConfig={uiConfig}\r\n            firebaseAuth={firebase.auth()}\r\n          />\r\n        </div>\r\n      </div>\r\n    </section>\r\n  );\r\n};\r\n\r\nconst enhance = connect(({ firebase: { auth, profile } }) => ({\r\n  auth,\r\n  profile,\r\n}));\r\n\r\nexport default enhance(Login);\r\n","C:\\Dokumentai\\Projektai\\truthmeter\\truth-meter\\src\\Component\\RatePost\\RatePost.js",[],"C:\\Dokumentai\\Projektai\\truthmeter\\truth-meter\\src\\Component\\Profile\\Profile.js",[],"C:\\Dokumentai\\Projektai\\truthmeter\\truth-meter\\src\\Component\\Search\\Search.js",["85","86"],"C:\\Dokumentai\\Projektai\\truthmeter\\truth-meter\\src\\Component\\Search\\Autocomplete.js",[],{"ruleId":"87","replacedBy":"88"},{"ruleId":"89","replacedBy":"90"},{"ruleId":"91","severity":1,"message":"92","line":5,"column":3,"nodeType":"93","messageId":"94","endLine":5,"endColumn":14},{"ruleId":"91","severity":1,"message":"95","line":6,"column":3,"nodeType":"93","messageId":"94","endLine":6,"endColumn":7},{"ruleId":"91","severity":1,"message":"96","line":7,"column":3,"nodeType":"93","messageId":"94","endLine":7,"endColumn":14},{"ruleId":"91","severity":1,"message":"97","line":8,"column":3,"nodeType":"93","messageId":"94","endLine":8,"endColumn":9},{"ruleId":"91","severity":1,"message":"98","line":13,"column":8,"nodeType":"93","messageId":"94","endLine":13,"endColumn":15},{"ruleId":"91","severity":1,"message":"99","line":2,"column":10,"nodeType":"93","messageId":"94","endLine":2,"endColumn":19},{"ruleId":"91","severity":1,"message":"100","line":8,"column":7,"nodeType":"93","messageId":"94","endLine":8,"endColumn":9},{"ruleId":"101","severity":1,"message":"102","line":85,"column":11,"nodeType":"103","endLine":92,"endColumn":13},{"ruleId":"91","severity":1,"message":"104","line":9,"column":10,"nodeType":"93","messageId":"94","endLine":9,"endColumn":14},{"ruleId":"105","severity":1,"message":"106","line":43,"column":9,"nodeType":"107","messageId":"108","endLine":52,"endColumn":10},{"ruleId":"105","severity":1,"message":"106","line":64,"column":9,"nodeType":"107","messageId":"108","endLine":72,"endColumn":10},{"ruleId":"109","severity":1,"message":"110","line":96,"column":6,"nodeType":"111","endLine":96,"endColumn":8,"suggestions":"112"},{"ruleId":"91","severity":1,"message":"113","line":12,"column":7,"nodeType":"93","messageId":"94","endLine":12,"endColumn":22},{"ruleId":"91","severity":1,"message":"114","line":38,"column":13,"nodeType":"93","messageId":"94","endLine":38,"endColumn":18},"no-native-reassign",["115"],"no-negated-in-lhs",["116"],"no-unused-vars","'NavDropdown' is defined but never used.","Identifier","unusedVar","'Form' is defined but never used.","'FormControl' is defined but never used.","'Button' is defined but never used.","'classes' is defined but never used.","'Container' is defined but never used.","'db' is assigned a value but never used.","jsx-a11y/iframe-has-title","<iframe> elements must have a unique title property.","JSXOpeningElement","'user' is assigned a value but never used.","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'authListener'. Either include it or remove the dependency array.","ArrayExpression",["117"],"'VirtalSearchBox' is assigned a value but never used.","'query' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"118","fix":"119"},"Update the dependencies array to be: [authListener]",{"range":"120","text":"121"},[2809,2811],"[authListener]"]