[{"C:\\Dokumentai\\Projektai\\truthmeter\\truth-meter\\src\\index.js":"1","C:\\Dokumentai\\Projektai\\truthmeter\\truth-meter\\src\\App.js":"2","C:\\Dokumentai\\Projektai\\truthmeter\\truth-meter\\src\\reportWebVitals.js":"3","C:\\Dokumentai\\Projektai\\truthmeter\\truth-meter\\src\\Component\\RouterManager\\RouterManager.js":"4","C:\\Dokumentai\\Projektai\\truthmeter\\truth-meter\\src\\Component\\Header\\Header.js":"5","C:\\Dokumentai\\Projektai\\truthmeter\\truth-meter\\src\\Component\\Main\\Main.js":"6","C:\\Dokumentai\\Projektai\\truthmeter\\truth-meter\\src\\Component\\PostCard\\PostCard.js":"7","C:\\Dokumentai\\Projektai\\truthmeter\\truth-meter\\src\\Config\\firebase.js":"8","C:\\Dokumentai\\Projektai\\truthmeter\\truth-meter\\src\\Component\\ViewPost\\ViewPost.js":"9","C:\\Dokumentai\\Projektai\\truthmeter\\truth-meter\\src\\Component\\NewPost\\NewPost.js":"10","C:\\Dokumentai\\Projektai\\truthmeter\\truth-meter\\src\\Config\\firebase-redux.js":"11","C:\\Dokumentai\\Projektai\\truthmeter\\truth-meter\\src\\Component\\Login\\Login.js":"12","C:\\Dokumentai\\Projektai\\truthmeter\\truth-meter\\src\\Component\\RatePost\\RatePost.js":"13","C:\\Dokumentai\\Projektai\\truthmeter\\truth-meter\\src\\Component\\Profile\\Profile.js":"14","C:\\Dokumentai\\Projektai\\truthmeter\\truth-meter\\src\\Component\\Search\\Search.js":"15","C:\\Dokumentai\\Projektai\\truthmeter\\truth-meter\\src\\Component\\Search\\Autocomplete.js":"16","C:\\Dokumentai\\Projektai\\truthmeter\\truth-meter\\src\\Component\\RouterManager\\ProtectedRoute.js":"17"},{"size":547,"mtime":1614244528635,"results":"18","hashOfConfig":"19"},{"size":652,"mtime":1613395085796,"results":"20","hashOfConfig":"19"},{"size":362,"mtime":499162500000,"results":"21","hashOfConfig":"19"},{"size":3290,"mtime":1616349714875,"results":"22","hashOfConfig":"19"},{"size":3266,"mtime":1616717955705,"results":"23","hashOfConfig":"19"},{"size":3345,"mtime":1616666232379,"results":"24","hashOfConfig":"19"},{"size":1579,"mtime":1616688731119,"results":"25","hashOfConfig":"19"},{"size":496,"mtime":1609138412025,"results":"26","hashOfConfig":"19"},{"size":3149,"mtime":1616688596266,"results":"27","hashOfConfig":"19"},{"size":4209,"mtime":1616318849121,"results":"28","hashOfConfig":"19"},{"size":621,"mtime":1609154760951,"results":"29","hashOfConfig":"19"},{"size":4506,"mtime":1616718280269,"results":"30","hashOfConfig":"19"},{"size":5530,"mtime":1616313336751,"results":"31","hashOfConfig":"19"},{"size":1428,"mtime":1616349284176,"results":"32","hashOfConfig":"19"},{"size":1202,"mtime":1616524422022,"results":"33","hashOfConfig":"19"},{"size":1798,"mtime":1616524720011,"results":"34","hashOfConfig":"19"},{"size":713,"mtime":1616349753563,"results":"35","hashOfConfig":"19"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},"4djakx",{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"47","messages":"48","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"38"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"38"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"38"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"38"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"38"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"76","usedDeprecatedRules":"38"},"C:\\Dokumentai\\Projektai\\truthmeter\\truth-meter\\src\\index.js",[],["77","78"],"C:\\Dokumentai\\Projektai\\truthmeter\\truth-meter\\src\\App.js",[],"C:\\Dokumentai\\Projektai\\truthmeter\\truth-meter\\src\\reportWebVitals.js",[],"C:\\Dokumentai\\Projektai\\truthmeter\\truth-meter\\src\\Component\\RouterManager\\RouterManager.js",[],"C:\\Dokumentai\\Projektai\\truthmeter\\truth-meter\\src\\Component\\Header\\Header.js",[],"C:\\Dokumentai\\Projektai\\truthmeter\\truth-meter\\src\\Component\\Main\\Main.js",["79","80"],"import React, { Component } from \"react\";\r\nimport { Container, Spinner } from \"react-bootstrap\";\r\nimport PostCard from \"../PostCard/PostCard\";\r\nimport firebase from \"../../Config/firebase\";\r\nimport classes from \"./Main.module.css\";\r\nimport Search from \"../Search/Search\";\r\n\r\nconst db = firebase.firestore();\r\n\r\nclass Main extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.myDiv = React.createRef();\r\n    this.state = {\r\n      lastPost: null,\r\n      isLoaded: false,\r\n      posts: [],\r\n      showLoading: false,\r\n    };\r\n  }\r\n\r\n  nextPost = () => {\r\n    this.setState({ showLoading: true });\r\n    db.collection(\"Posts\")\r\n      .orderBy(\"createDate\", \"desc\")\r\n      .startAfter(this.state.lastPost.createDate)\r\n      .limit(5)\r\n      .get()\r\n      .then((docs) => {\r\n        if (!docs.empty) {\r\n          let allPosts = [];\r\n          docs.forEach(function (doc) {\r\n            const post = { id: doc.id, ...doc.data() };\r\n            allPosts.push(post);\r\n          });\r\n\r\n          let updated_posts = this.state.posts.concat(allPosts);\r\n          this.setState(\r\n            {\r\n              posts: updated_posts,\r\n            },\r\n            () => {\r\n              this.setState({\r\n                isLoaded: true,\r\n                lastPost: this.state.posts[this.state.posts.length - 1],\r\n              });\r\n            }\r\n          );\r\n        }\r\n        this.setState({ showLoading: false });\r\n      });\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.getMyPosts();\r\n  }\r\n\r\n  // Populate posts array with firebase data, onSnapshot allows real time rendering\r\n  getMyPosts = () => {\r\n    db.collection(\"Posts\")\r\n      .orderBy(\"createDate\", \"desc\")\r\n      .limit(15)\r\n      .onSnapshot((docs) => {\r\n        if (!docs.empty) {\r\n          let allPosts = [];\r\n          docs.forEach(function (doc) {\r\n            const post = {\r\n              id: doc.id,\r\n              ...doc.data(),\r\n            };\r\n            allPosts.push(post);\r\n          });\r\n          this.setState(\r\n            {\r\n              posts: allPosts,\r\n            },\r\n            () => {\r\n              this.setState({\r\n                isLoaded: true,\r\n                lastPost: this.state.posts[this.state.posts.length - 1],\r\n              });\r\n            }\r\n          );\r\n        }\r\n      });\r\n  };\r\n\r\n  handleLoadMore = () => {\r\n    this.getMyPosts();\r\n  };\r\n\r\n  handleScroll = () => {\r\n    let triggerHeight =\r\n      this.myDiv.current.scrollTop + this.myDiv.current.offsetHeight;\r\n    if (triggerHeight >= this.myDiv.current.scrollHeight) {\r\n      this.nextPost();\r\n    }\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <div\r\n          className={classes.Container}\r\n          onScroll={() => this.handleScroll()}\r\n          ref={this.myDiv}\r\n        >\r\n          {\" \"}\r\n          {/* <Search /> */}\r\n          {/* Once the posts array is populated, return the elements in the array as PostCard component with props */}\r\n          {this.state.isLoaded &&\r\n            this.state.posts.map((post, index) => {\r\n              return <PostCard key={index} data={post} />;\r\n            })}\r\n        </div>\r\n        {this.state.showLoading ? (\r\n          <div className={classes.Loading}>\r\n            <Spinner animation=\"grow\" />\r\n          </div>\r\n        ) : (\r\n          \"\"\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Main;\r\n","C:\\Dokumentai\\Projektai\\truthmeter\\truth-meter\\src\\Component\\PostCard\\PostCard.js",["81"],"import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Container, Col, Row } from \"react-bootstrap\";\r\nimport GaugeChart from \"react-gauge-chart\";\r\nimport firebase from \"../../Config/firebase\";\r\nimport classes from \"./PostCard.module.css\";\r\n\r\nconst db = firebase.firestore();\r\n// Convert createDate timestamp seconds to string with result being YYYY/MM/DD HH:MM:SS\r\nexport function timeStampToString(ts) {\r\n  const date = new Date(ts * 1000);\r\n  return (\r\n    date.getFullYear() +\r\n    \"/\" +\r\n    (date.getMonth() + 1) +\r\n    \"/\" +\r\n    date.getDate() +\r\n    \" \" +\r\n    (date.getHours() < 10 ? \"0\" : \"\") +\r\n    date.getHours() +\r\n    \":\" +\r\n    (date.getMinutes() < 10 ? \"0\" : \"\") +\r\n    date.getMinutes() +\r\n    \":\" +\r\n    (date.getSeconds() < 10 ? \"0\" : \"\") +\r\n    date.getSeconds()\r\n  );\r\n}\r\n\r\nconst PostCard = (props) => {\r\n  return (\r\n    <Link\r\n      to={{ pathname: \"post/\" + props.data.id, state: { post: props.data } }}\r\n    >\r\n      <Container className={classes.PostCardContainer}>\r\n        <Row>\r\n          <Col className=\"my-auto\" sm={10}>\r\n            {props.data.link}\r\n          </Col>\r\n          <Col className=\"ml-auto\" sm={2}>\r\n            <GaugeChart\r\n              style={{ maxWidth: \"150px\" }}\r\n              textColor=\"black\"\r\n              id=\"gauge-chart6\"\r\n              animate={true}\r\n              nrOfLevels={15}\r\n              percent={props.data.ratingScore / 100}\r\n              needleColor=\"#345243\"\r\n            />\r\n          </Col>\r\n        </Row>\r\n      </Container>\r\n    </Link>\r\n  );\r\n};\r\n\r\nexport default PostCard;\r\n","C:\\Dokumentai\\Projektai\\truthmeter\\truth-meter\\src\\Config\\firebase.js",[],"C:\\Dokumentai\\Projektai\\truthmeter\\truth-meter\\src\\Component\\ViewPost\\ViewPost.js",["82"],"import React, { Component } from \"react\";\r\nimport { withRouter } from \"react-router-dom\";\r\nimport { Collapse, Button } from \"react-bootstrap\";\r\nimport firebase from \"../../Config/firebase\";\r\n\r\nconst db = firebase.firestore();\r\n\r\nclass ViewPost extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      post: {},\r\n      isLoaded: false,\r\n      infoOpen: false,\r\n    };\r\n  }\r\n\r\n  //If state is defined, populate post state with post data from this.props.location.state.post, set isLoaded to true.\r\n  //If state is not defined, run getPostByID function passing post id\r\n  componentDidMount() {\r\n    this.getPostByID(this.props.match.params.id);\r\n  }\r\n\r\n  // Convert createDate timestamp to string with result being YYYY/MM/DD HH:MM:SS\r\n  timeStampToString = (ts) => {\r\n    const date = new Date(ts * 1000);\r\n    return (\r\n      date.getFullYear() +\r\n      \"/\" +\r\n      (date.getMonth() + 1) +\r\n      \"/\" +\r\n      date.getDate() +\r\n      \" \" +\r\n      (date.getHours() < 10 ? \"0\" : \"\") +\r\n      date.getHours() +\r\n      \":\" +\r\n      (date.getMinutes() < 10 ? \"0\" : \"\") +\r\n      date.getMinutes() +\r\n      \":\" +\r\n      (date.getSeconds() < 10 ? \"0\" : \"\") +\r\n      date.getSeconds()\r\n    );\r\n  };\r\n\r\n  // get article from Posts collection in firestore, set article state with data\r\n  getPostByID = (postid) => {\r\n    db.collection(\"Posts\")\r\n      .doc(postid)\r\n      // do i need to use onSnapshot here, if im migrating GaugeChart to RatePost component?\r\n      .onSnapshot((doc) => {\r\n        if (doc.exists) {\r\n          this.setState(\r\n            {\r\n              post: doc.data(),\r\n            },\r\n            () => {\r\n              this.setState({\r\n                isLoaded: true,\r\n              });\r\n            }\r\n          );\r\n        } else {\r\n          this.props.history.push({ pathname: \"/\" });\r\n        }\r\n      });\r\n  };\r\n\r\n  render() {\r\n    if (this.state.isLoaded) {\r\n      // make the link have a protocol and the start ()\r\n      let link;\r\n      if (!this.state.post.link.slice(0, 4).includes(\"http\")) {\r\n        link = \"https://\" + this.state.post.link;\r\n      } else {\r\n        link = this.state.post.link;\r\n      }\r\n\r\n      return (\r\n        <div style={{ border: \"1px solid black\" }}>\r\n          <div>\r\n            <p style={{ display: \"inline-block\" }}>{this.state.post.link}</p>\r\n            <Button\r\n              style={{ display: \"inline-block\" }}\r\n              onClick={() => this.setState({ infoOpen: !this.state.infoOpen })}\r\n              aria-controls=\"example-collapse-text\"\r\n              aria-expanded={this.state.infoOpen}\r\n            ></Button>\r\n            <Collapse in={this.state.infoOpen}>\r\n              <div id=\"example-collapse-text\">info here</div>\r\n            </Collapse>\r\n          </div>\r\n\r\n          <iframe\r\n            src={link}\r\n            style={{\r\n              width: \"100%\",\r\n              height: \"80vh\",\r\n              border: \"none\",\r\n            }}\r\n          />\r\n          <button onClick={() => console.log(link)}>asd</button>\r\n        </div>\r\n      );\r\n    } else {\r\n      return <div>Loading</div>;\r\n    }\r\n  }\r\n}\r\n\r\nexport default withRouter(ViewPost);\r\n","C:\\Dokumentai\\Projektai\\truthmeter\\truth-meter\\src\\Component\\NewPost\\NewPost.js",[],"C:\\Dokumentai\\Projektai\\truthmeter\\truth-meter\\src\\Config\\firebase-redux.js",[],"C:\\Dokumentai\\Projektai\\truthmeter\\truth-meter\\src\\Component\\Login\\Login.js",["83","84","85","86"],"C:\\Dokumentai\\Projektai\\truthmeter\\truth-meter\\src\\Component\\RatePost\\RatePost.js",[],"C:\\Dokumentai\\Projektai\\truthmeter\\truth-meter\\src\\Component\\Profile\\Profile.js",["87"],"import React, { Component } from \"react\";\r\nimport firebase from \"../../Config/firebase\";\r\nimport { withRouter, Redirect } from \"react-router-dom\";\r\n\r\nconst db = firebase.firestore();\r\n\r\nclass Profile extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      hasLoaded: false,\r\n      userData: [],\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    // populate userData array with user data from firebase on first render\r\n    const userRef = db.collection(\"Users\").doc(this.props.auth.uid);\r\n    userRef.get().then((doc) => {\r\n      if (doc.exists) {\r\n        this.setState({ userData: doc.data() }, () => {\r\n          this.setState({ hasLoaded: true });\r\n        });\r\n      }\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <div>\r\n          {this.state.userData.userPosts && (\r\n            <div>\r\n              user posts:\r\n              {this.state.userData.userPosts.map((post) => (\r\n                <li>{post}</li>\r\n              ))}\r\n            </div>\r\n          )}\r\n          {this.state.userData.userPosts && (\r\n            <div>\r\n              user rates:\r\n              {this.state.userData.userRatesID.map((rate, i) => (\r\n                <li>\r\n                  {rate}, {this.state.userData.userRatesScore[i]}\r\n                </li>\r\n              ))}\r\n            </div>\r\n          )}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withRouter(Profile);\r\n","C:\\Dokumentai\\Projektai\\truthmeter\\truth-meter\\src\\Component\\Search\\Search.js",["88","89"],"import React, { Component } from \"react\";\r\n\r\nimport algoliasearch from \"algoliasearch/lite\";\r\nimport {\r\n  InstantSearch,\r\n  Configure,\r\n  connectSearchBox,\r\n} from \"react-instantsearch-dom\";\r\nimport Autocomplete from \"./Autocomplete\";\r\nimport \"./Search.css\";\r\n\r\nconst VirtalSearchBox = connectSearchBox(() => null);\r\n\r\nconst searchClient = algoliasearch(\r\n  \"5K3L830FWN\",\r\n  \"35d3843c2a54cf8a7a59d20ea50ef518\"\r\n);\r\n\r\nclass Search extends Component {\r\n  state = {\r\n    query: \"\",\r\n  };\r\n\r\n  onSuggestionSelected = (_, { suggestion }) => {\r\n    this.setState({\r\n      query: suggestion.name,\r\n    });\r\n    window.open(\"/post/\" + suggestion.objectID);\r\n  };\r\n\r\n  onSuggestionCleared = () => {\r\n    this.setState({\r\n      query: \"\",\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const { query } = this.state;\r\n\r\n    return (\r\n      <div className=\"container\">\r\n        <InstantSearch indexName=\"Posts\" searchClient={searchClient}>\r\n          <Configure hitsPerPage={5} />\r\n          <Autocomplete\r\n            onSuggestionSelected={this.onSuggestionSelected}\r\n            onSuggestionCleared={this.onSuggestionCleared}\r\n          />\r\n        </InstantSearch>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Search;\r\n","C:\\Dokumentai\\Projektai\\truthmeter\\truth-meter\\src\\Component\\Search\\Autocomplete.js",[],"C:\\Dokumentai\\Projektai\\truthmeter\\truth-meter\\src\\Component\\RouterManager\\ProtectedRoute.js",["90"],"import React from \"react\";\r\nimport { Route, Redirect } from \"react-router-dom\";\r\n\r\n// check if user has logged, if true, then allow to render the component, if false, redirect somewhere else. This component goes to RouterManager\r\nfunction ProtectedRoute({\r\n  isAuth: isAuth,\r\n  component: Component,\r\n  redirectpathname: pathname,\r\n  ...rest\r\n}) {\r\n  return (\r\n    <Route\r\n      {...rest}\r\n      render={(props) => {\r\n        if (isAuth) {\r\n          return <Component />;\r\n        } else {\r\n          return (\r\n            <Redirect\r\n              to={{ pathname: pathname, state: { from: props.location } }}\r\n            />\r\n          );\r\n        }\r\n      }}\r\n    />\r\n  );\r\n}\r\n\r\nexport default ProtectedRoute;\r\n",{"ruleId":"91","replacedBy":"92"},{"ruleId":"93","replacedBy":"94"},{"ruleId":"95","severity":1,"message":"96","line":2,"column":10,"nodeType":"97","messageId":"98","endLine":2,"endColumn":19},{"ruleId":"95","severity":1,"message":"99","line":6,"column":8,"nodeType":"97","messageId":"98","endLine":6,"endColumn":14},{"ruleId":"95","severity":1,"message":"100","line":8,"column":7,"nodeType":"97","messageId":"98","endLine":8,"endColumn":9},{"ruleId":"101","severity":1,"message":"102","line":93,"column":11,"nodeType":"103","endLine":100,"endColumn":13},{"ruleId":"95","severity":1,"message":"104","line":9,"column":10,"nodeType":"97","messageId":"98","endLine":9,"endColumn":14},{"ruleId":"105","severity":1,"message":"106","line":43,"column":9,"nodeType":"107","messageId":"108","endLine":52,"endColumn":10},{"ruleId":"105","severity":1,"message":"106","line":64,"column":9,"nodeType":"107","messageId":"108","endLine":72,"endColumn":10},{"ruleId":"109","severity":1,"message":"110","line":96,"column":6,"nodeType":"111","endLine":96,"endColumn":8,"suggestions":"112"},{"ruleId":"95","severity":1,"message":"113","line":3,"column":22,"nodeType":"97","messageId":"98","endLine":3,"endColumn":30},{"ruleId":"95","severity":1,"message":"114","line":12,"column":7,"nodeType":"97","messageId":"98","endLine":12,"endColumn":22},{"ruleId":"95","severity":1,"message":"115","line":38,"column":13,"nodeType":"97","messageId":"98","endLine":38,"endColumn":18},{"ruleId":"116","severity":1,"message":"117","line":6,"column":3,"nodeType":"118","messageId":"119","endLine":6,"endColumn":17,"fix":"120"},"no-native-reassign",["121"],"no-negated-in-lhs",["122"],"no-unused-vars","'Container' is defined but never used.","Identifier","unusedVar","'Search' is defined but never used.","'db' is assigned a value but never used.","jsx-a11y/iframe-has-title","<iframe> elements must have a unique title property.","JSXOpeningElement","'user' is assigned a value but never used.","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'authListener'. Either include it or remove the dependency array.","ArrayExpression",["123"],"'Redirect' is defined but never used.","'VirtalSearchBox' is assigned a value but never used.","'query' is assigned a value but never used.","no-useless-rename","Destructuring assignment isAuth unnecessarily renamed.","Property","unnecessarilyRenamed",{"range":"124","text":"125"},"no-global-assign","no-unsafe-negation",{"desc":"126","fix":"127"},[259,273],"isAuth","Update the dependencies array to be: [authListener]",{"range":"128","text":"129"},[2808,2810],"[authListener]"]