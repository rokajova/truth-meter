[{"C:\\Dokumentai\\Projektai\\truthmeter\\truth-meter\\src\\index.js":"1","C:\\Dokumentai\\Projektai\\truthmeter\\truth-meter\\src\\App.js":"2","C:\\Dokumentai\\Projektai\\truthmeter\\truth-meter\\src\\reportWebVitals.js":"3","C:\\Dokumentai\\Projektai\\truthmeter\\truth-meter\\src\\Component\\RouterManager\\RouterManager.js":"4","C:\\Dokumentai\\Projektai\\truthmeter\\truth-meter\\src\\Component\\Header\\Header.js":"5","C:\\Dokumentai\\Projektai\\truthmeter\\truth-meter\\src\\Component\\Main\\Main.js":"6","C:\\Dokumentai\\Projektai\\truthmeter\\truth-meter\\src\\Component\\PostCard\\PostCard.js":"7","C:\\Dokumentai\\Projektai\\truthmeter\\truth-meter\\src\\Config\\firebase.js":"8","C:\\Dokumentai\\Projektai\\truthmeter\\truth-meter\\src\\Component\\ViewPost\\ViewPost.js":"9","C:\\Dokumentai\\Projektai\\truthmeter\\truth-meter\\src\\Component\\NewPost\\NewPost.js":"10","C:\\Dokumentai\\Projektai\\truthmeter\\truth-meter\\src\\Config\\firebase-redux.js":"11","C:\\Dokumentai\\Projektai\\truthmeter\\truth-meter\\src\\Component\\Login\\Login.js":"12","C:\\Dokumentai\\Projektai\\truthmeter\\truth-meter\\src\\Component\\RatePost\\RatePost.js":"13","C:\\Dokumentai\\Projektai\\truthmeter\\truth-meter\\src\\Component\\Profile\\Profile.js":"14","C:\\Dokumentai\\Projektai\\truthmeter\\truth-meter\\src\\Component\\Search\\Search.js":"15","C:\\Dokumentai\\Projektai\\truthmeter\\truth-meter\\src\\Component\\Search\\Autocomplete.js":"16","C:\\Dokumentai\\Projektai\\truthmeter\\truth-meter\\src\\Component\\RouterManager\\ProtectedRoute.js":"17"},{"size":547,"mtime":1616934899865,"results":"18","hashOfConfig":"19"},{"size":652,"mtime":1613395085796,"results":"20","hashOfConfig":"19"},{"size":362,"mtime":499162500000,"results":"21","hashOfConfig":"19"},{"size":3290,"mtime":1617193440131,"results":"22","hashOfConfig":"19"},{"size":3472,"mtime":1617029015224,"results":"23","hashOfConfig":"19"},{"size":3163,"mtime":1617331761031,"results":"24","hashOfConfig":"19"},{"size":1641,"mtime":1616953243042,"results":"25","hashOfConfig":"19"},{"size":496,"mtime":1609138412025,"results":"26","hashOfConfig":"19"},{"size":5731,"mtime":1617286647729,"results":"27","hashOfConfig":"19"},{"size":3904,"mtime":1616977044479,"results":"28","hashOfConfig":"19"},{"size":621,"mtime":1609154760951,"results":"29","hashOfConfig":"19"},{"size":4639,"mtime":1616969666069,"results":"30","hashOfConfig":"19"},{"size":6053,"mtime":1617287439772,"results":"31","hashOfConfig":"19"},{"size":2312,"mtime":1616977418036,"results":"32","hashOfConfig":"19"},{"size":1290,"mtime":1616976653658,"results":"33","hashOfConfig":"19"},{"size":1825,"mtime":1616976039723,"results":"34","hashOfConfig":"19"},{"size":713,"mtime":1616349753563,"results":"35","hashOfConfig":"19"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},"4djakx",{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"49","messages":"50","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"38"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"38"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"38"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"38"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"38"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"38"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"77","usedDeprecatedRules":"38"},"C:\\Dokumentai\\Projektai\\truthmeter\\truth-meter\\src\\index.js",[],["78","79"],"C:\\Dokumentai\\Projektai\\truthmeter\\truth-meter\\src\\App.js",[],"C:\\Dokumentai\\Projektai\\truthmeter\\truth-meter\\src\\reportWebVitals.js",[],"C:\\Dokumentai\\Projektai\\truthmeter\\truth-meter\\src\\Component\\RouterManager\\RouterManager.js",[],"C:\\Dokumentai\\Projektai\\truthmeter\\truth-meter\\src\\Component\\Header\\Header.js",[],"C:\\Dokumentai\\Projektai\\truthmeter\\truth-meter\\src\\Component\\Main\\Main.js",[],"C:\\Dokumentai\\Projektai\\truthmeter\\truth-meter\\src\\Component\\PostCard\\PostCard.js",["80","81","82","83"],"import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Container, Col, Row } from \"react-bootstrap\";\r\nimport GaugeChart from \"react-gauge-chart\";\r\nimport firebase from \"../../Config/firebase\";\r\nimport classes from \"./PostCard.module.css\";\r\n\r\nconst db = firebase.firestore();\r\n// Convert createDate timestamp seconds to string with result being YYYY/MM/DD HH:MM:SS\r\nexport function timeStampToString(ts) {\r\n  const date = new Date(ts * 1000);\r\n  return (\r\n    date.getFullYear() +\r\n    \"/\" +\r\n    (date.getMonth() + 1) +\r\n    \"/\" +\r\n    date.getDate() +\r\n    \" \" +\r\n    (date.getHours() < 10 ? \"0\" : \"\") +\r\n    date.getHours() +\r\n    \":\" +\r\n    (date.getMinutes() < 10 ? \"0\" : \"\") +\r\n    date.getMinutes() +\r\n    \":\" +\r\n    (date.getSeconds() < 10 ? \"0\" : \"\") +\r\n    date.getSeconds()\r\n  );\r\n}\r\n\r\nconst PostCard = (props) => {\r\n  return (\r\n    <Link\r\n      style={{ textDecoration: \"none\" }}\r\n      to={{ pathname: \"post/\" + props.data.id }}\r\n    >\r\n      <div className={classes.PostCardContainer}>\r\n        <div className={classes.Link}>\r\n          <span>{props.data.link}</span>\r\n        </div>\r\n        <div className={classes.Gauge}>\r\n          <GaugeChart\r\n            nrOfLevels={10}\r\n            cornerRadius={1}\r\n            colors={[\"red\", \"yellow\", \"forestgreen\"]}\r\n            arcWidth={0.3}\r\n            animate={true}\r\n            percent={props.data.ratingScore / 100}\r\n            needleColor=\"#fff\"\r\n            needleBaseColor=\"rgb(206, 223, 255)\"\r\n            hideText={true}\r\n            animDelay={0}\r\n          />\r\n        </div>\r\n      </div>\r\n    </Link>\r\n  );\r\n};\r\n\r\nexport default PostCard;\r\n","C:\\Dokumentai\\Projektai\\truthmeter\\truth-meter\\src\\Config\\firebase.js",[],"C:\\Dokumentai\\Projektai\\truthmeter\\truth-meter\\src\\Component\\ViewPost\\ViewPost.js",["84"],"import React, { Component } from \"react\";\r\nimport { withRouter } from \"react-router-dom\";\r\nimport Collapse from \"react-bootstrap/Collapse\";\r\nimport firebase from \"../../Config/firebase\";\r\nimport classes from \"./ViewPost.module.css\";\r\nimport GaugeChart from \"react-gauge-chart\";\r\n\r\nconst db = firebase.firestore();\r\n\r\nclass ViewPost extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      post: {},\r\n      isLoaded: false,\r\n      infoOpen: false,\r\n    };\r\n  }\r\n\r\n  //If state is defined, populate post state with post data from this.props.location.state.post, set isLoaded to true.\r\n  //If state is not defined, run getPostByID function passing post id\r\n  componentDidMount() {\r\n    this.getPostByID(this.props.match.params.id);\r\n  }\r\n\r\n  // Convert createDate timestamp to string with result being YYYY/MM/DD HH:MM:SS\r\n  timeStampToString = (ts) => {\r\n    const date = new Date(ts * 1000);\r\n    return (\r\n      date.getFullYear() +\r\n      \"/\" +\r\n      (date.getMonth() + 1) +\r\n      \"/\" +\r\n      date.getDate() +\r\n      \" \" +\r\n      (date.getHours() < 10 ? \"0\" : \"\") +\r\n      date.getHours() +\r\n      \":\" +\r\n      (date.getMinutes() < 10 ? \"0\" : \"\") +\r\n      date.getMinutes() +\r\n      \":\" +\r\n      (date.getSeconds() < 10 ? \"0\" : \"\") +\r\n      date.getSeconds()\r\n    );\r\n  };\r\n\r\n  // get article from Posts collection in firestore, set article state with data\r\n  getPostByID = (postid) => {\r\n    db.collection(\"Posts\")\r\n      .doc(postid)\r\n      // do i need to use onSnapshot here, if im migrating GaugeChart to RatePost component?\r\n      .onSnapshot((doc) => {\r\n        if (doc.exists) {\r\n          this.setState(\r\n            {\r\n              post: doc.data(),\r\n            },\r\n            () => {\r\n              this.setState({\r\n                isLoaded: true,\r\n              });\r\n            }\r\n          );\r\n        } else {\r\n          this.props.history.push({ pathname: \"/\" });\r\n        }\r\n      });\r\n  };\r\n\r\n  render() {\r\n    if (this.state.isLoaded) {\r\n      // make the link have a protocol and the start ()\r\n      let link;\r\n      if (!this.state.post.link.slice(0, 4).includes(\"http\")) {\r\n        link = \"https://\" + this.state.post.link;\r\n      } else {\r\n        link = this.state.post.link;\r\n      }\r\n\r\n      return (\r\n        <div>\r\n          <div>\r\n            {\" \"}\r\n            <span className={classes.Link}>{this.state.post.link}</span>\r\n            <span\r\n              onClick={() => this.setState({ infoOpen: !this.state.infoOpen })}\r\n              className={classes.Dots}\r\n            />\r\n            <Collapse in={this.state.infoOpen}>\r\n              <div className={classes.MoreInfo}>\r\n                <div className={classes.MoreInfoEl}>\r\n                  <span\r\n                    style={{\r\n                      color: \"lightblue\",\r\n                    }}\r\n                  >\r\n                    Created by :\r\n                  </span>{\" \"}\r\n                  {this.state.post.createUserName}\r\n                </div>\r\n                <div className={classes.MoreInfoEl}>\r\n                  {\" \"}\r\n                  <span\r\n                    style={{\r\n                      color: \"lightblue\",\r\n                    }}\r\n                  >\r\n                    Date Posted :\r\n                  </span>{\" \"}\r\n                  {this.timeStampToString(this.state.post.createDate.seconds)}\r\n                </div>\r\n                <div className={classes.MoreInfoEl}>\r\n                  <span\r\n                    style={{\r\n                      color: \"lightblue\",\r\n                    }}\r\n                  >\r\n                    Full link :\r\n                  </span>{\" \"}\r\n                  <a href={this.state.post.link}>{this.state.post.link}</a>\r\n                </div>\r\n                {this.state.post.ratingScore ? (\r\n                  <div className={classes.MoreInfoEl}>\r\n                    <span\r\n                      style={{\r\n                        color: \"lightblue\",\r\n                      }}\r\n                    >\r\n                      Truth score :\r\n                    </span>{\" \"}\r\n                    {this.state.post.ratingScore}%\r\n                  </div>\r\n                ) : (\r\n                  <div className={classes.MoreInfoEl}>\r\n                    <span\r\n                      style={{\r\n                        color: \"lightblue\",\r\n                      }}\r\n                    >\r\n                      Truth score :\r\n                    </span>{\" \"}\r\n                    This post has not been rated.\r\n                  </div>\r\n                )}\r\n                <div className={classes.MoreInfoEl}>\r\n                  <span\r\n                    style={{\r\n                      color: \"lightblue\",\r\n                    }}\r\n                  >\r\n                    Total rates :\r\n                  </span>{\" \"}\r\n                  {this.state.post.rates.length}\r\n                </div>\r\n              </div>\r\n            </Collapse>\r\n          </div>\r\n          <div className={classes.iframeContainer}>\r\n            <div className={classes.Gauge}>\r\n              <GaugeChart\r\n                nrOfLevels={10}\r\n                cornerRadius={1}\r\n                colors={[\"red\", \"yellow\", \"forestgreen\"]}\r\n                arcWidth={0.3}\r\n                animate={true}\r\n                percent={this.state.post.ratingScore / 100}\r\n                needleColor=\"#fff\"\r\n                needleBaseColor=\"rgb(206, 223, 255)\"\r\n                hideText={true}\r\n                animDelay={0}\r\n              />\r\n            </div>\r\n            <iframe className={classes.iframe} src={link} />\r\n          </div>\r\n        </div>\r\n      );\r\n    } else {\r\n      return <div>Loading</div>;\r\n    }\r\n  }\r\n}\r\n\r\nexport default withRouter(ViewPost);\r\n","C:\\Dokumentai\\Projektai\\truthmeter\\truth-meter\\src\\Component\\NewPost\\NewPost.js",["85","86"],"import React, { Component } from \"react\";\r\nimport firebase from \"../../Config/firebase\";\r\nimport { withRouter } from \"react-router-dom\";\r\nimport ReactTags from \"react-tag-autocomplete\";\r\nimport classes from \"./NewPost.module.css\";\r\n\r\nconst db = firebase.firestore();\r\n\r\nclass NewPost extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      tags: [],\r\n      post: {\r\n        title: \"\",\r\n        link: \"\",\r\n        createDate: new Date(),\r\n        createUserID: \"\",\r\n        createUserName: \"\",\r\n        tags: [],\r\n        popularScore: \"\",\r\n        rates: [],\r\n        ratingScore: \"\",\r\n      },\r\n    };\r\n    this.reactTags = React.createRef();\r\n  }\r\n\r\n  //ReactTags function\r\n  onTagDelete(i) {\r\n    const tags = this.state.tags.slice(0);\r\n    tags.splice(i, 1);\r\n    this.setState({ tags });\r\n  }\r\n\r\n  //ReactTags function\r\n  onTagAddition(tag) {\r\n    const tags = [].concat(this.state.tags, tag);\r\n    this.setState({ tags });\r\n  }\r\n  //ReactTags input validate condition(must return a boolean)\r\n  onTagValidate() {\r\n    return this.state.tags.length < 4;\r\n  }\r\n\r\n  // set Post title state from the Input\r\n  onChangePostTitle = (value) => {\r\n    this.setState({\r\n      post: {\r\n        ...this.state.post,\r\n        title: value,\r\n      },\r\n    });\r\n  };\r\n\r\n  // set Post link state from the Input\r\n  onChangePostLink = (value) => {\r\n    this.setState({\r\n      post: {\r\n        ...this.state.post,\r\n        link: value,\r\n      },\r\n    });\r\n  };\r\n\r\n  //add doc to Posts collection, then redirect to home\r\n  submitPost() {\r\n    // get user reference\r\n    const userRef = db.collection(\"Users\").doc(this.props.auth.uid);\r\n\r\n    const post = this.state.post;\r\n    post.createUserID = this.props.auth.uid;\r\n    post.createUserName = this.props.auth.displayName;\r\n    post.tags = this.state.tags;\r\n    db.collection(\"Posts\")\r\n      .add(post)\r\n      .then((res) => {\r\n        return userRef.get().then((doc) => {\r\n          userRef.update({ userPosts: [...doc.data().userPosts, res.id] });\r\n        });\r\n      })\r\n      .catch((err) => console.log(err));\r\n    this.props.history.push(\"/\");\r\n  }\r\n\r\n  render() {\r\n    // Check is string is an URL\r\n    function is_url(str) {\r\n      let regexp = /^(?:(?:https?|ftp):\\/\\/)?(?:(?!(?:10|127)(?:\\.\\d{1,3}){3})(?!(?:169\\.254|192\\.168)(?:\\.\\d{1,3}){2})(?!172\\.(?:1[6-9]|2\\d|3[0-1])(?:\\.\\d{1,3}){2})(?:[1-9]\\d?|1\\d\\d|2[01]\\d|22[0-3])(?:\\.(?:1?\\d{1,2}|2[0-4]\\d|25[0-5])){2}(?:\\.(?:[1-9]\\d?|1\\d\\d|2[0-4]\\d|25[0-4]))|(?:(?:[a-z\\u00a1-\\uffff0-9]-*)*[a-z\\u00a1-\\uffff0-9]+)(?:\\.(?:[a-z\\u00a1-\\uffff0-9]-*)*[a-z\\u00a1-\\uffff0-9]+)*(?:\\.(?:[a-z\\u00a1-\\uffff]{2,})))(?::\\d{2,5})?(?:\\/\\S*)?$/;\r\n      if (regexp.test(str)) {\r\n        return true;\r\n      } else {\r\n        return false;\r\n      }\r\n    }\r\n\r\n    // Must return True in order to Submit a post\r\n    const SumbmitCondition = is_url(this.state.post.link);\r\n\r\n    return (\r\n      <section className={classes.NewPost}>\r\n        <div className={classes.NewPostContainer}>\r\n          <div>\r\n            {\" \"}\r\n            <input\r\n              type=\"text\"\r\n              placeholder=\"Enter a link and click Submit...\"\r\n              autoFocus\r\n              required\r\n              value={this.state.post.link}\r\n              onChange={(e) => this.onChangePostLink(e.target.value)}\r\n              value={this.state.post.link}\r\n            />{\" \"}\r\n          </div>\r\n          <div className={classes.ButtonContainer}>\r\n            {SumbmitCondition ? (\r\n              <button\r\n                className={classes.button}\r\n                onClick={() => this.submitPost()}\r\n              >\r\n                Submit\r\n              </button>\r\n            ) : (\r\n              <button className={classes.button} disabled>\r\n                Submit\r\n              </button>\r\n            )}\r\n          </div>\r\n        </div>\r\n      </section>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withRouter(NewPost);\r\n","C:\\Dokumentai\\Projektai\\truthmeter\\truth-meter\\src\\Config\\firebase-redux.js",[],"C:\\Dokumentai\\Projektai\\truthmeter\\truth-meter\\src\\Component\\Login\\Login.js",["87","88","89","90"],"import React, { useState, useEffect } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport StyledFirebaseAuth from \"react-firebaseui/StyledFirebaseAuth\";\r\nimport firebase from \"../../Config/firebase\";\r\nimport classes from \"./Login.module.css\";\r\n\r\nconst Login = () => {\r\n  // required states for authentication\r\n  const [user, setUser] = useState(\"\");\r\n  const [email, setEmail] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n  const [emailError, setEmailError] = useState(\"\");\r\n  const [passwordError, setPasswordError] = useState(\"\");\r\n  const [hasAccount, setHasAccount] = useState(true);\r\n\r\n  // config for google authentication\r\n  const uiConfig = {\r\n    signInFlow: \"popup\",\r\n    signInSuccessUrl: \"/\",\r\n    signInOptions: [firebase.auth.GoogleAuthProvider.PROVIDER_ID],\r\n  };\r\n\r\n  // clears login and signin state\r\n  const clearInputs = () => {\r\n    setEmail(\"\");\r\n    setPassword(\"\");\r\n  };\r\n\r\n  // clears errors state\r\n  const clearErrors = () => {\r\n    setEmailError(\"\");\r\n    setPasswordError(\"\");\r\n  };\r\n\r\n  // on click change between sign in and sign up, clear the inputs\r\n  const handleHasAccount = () => {\r\n    clearInputs();\r\n    setHasAccount(!hasAccount);\r\n  };\r\n\r\n  // signs in with existing user if there are no errors described in the switch statement\r\n  // if there are errors, set state with the corresponding error\r\n  const handleLogin = () => {\r\n    clearErrors();\r\n    firebase\r\n      .auth()\r\n      .signInWithEmailAndPassword(email, password)\r\n      .catch((err) => {\r\n        switch (err.code) {\r\n          case \"auth/invalid-email\":\r\n          case \"auth/user-disabled\":\r\n          case \"auth/user-not-found\":\r\n            setEmailError(err.message);\r\n            break;\r\n          case \"auth/wrong-password\":\r\n            setPasswordError(err.message);\r\n            break;\r\n        }\r\n      });\r\n  };\r\n\r\n  // signs up a new user if there are no errors described in the switch statement\r\n  // if there are errors, set state with the corresponding error\r\n  const handleSignup = () => {\r\n    clearErrors();\r\n    firebase\r\n      .auth()\r\n      .createUserWithEmailAndPassword(email, password)\r\n      .catch((err) => {\r\n        switch (err.code) {\r\n          case \"auth/email-already-in-use\":\r\n          case \"auth/invalid-email\":\r\n            setEmailError(err.message);\r\n            break;\r\n          case \"auth/weak-password\":\r\n            setPasswordError(err.message);\r\n            break;\r\n        }\r\n      });\r\n  };\r\n\r\n  // sign out user, this is being used in the Header\r\n  // const handleLogout = () => {\r\n  //   firebase.auth().signOut();\r\n  // };\r\n\r\n  // checks for auth state changes, set state accordingly\r\n  const authListener = () => {\r\n    firebase.auth().onAuthStateChanged((user) => {\r\n      if (user) {\r\n        clearInputs();\r\n        setUser(user);\r\n      } else {\r\n        setUser(\"\");\r\n      }\r\n    });\r\n  };\r\n\r\n  // this hook is ran on every render\r\n  useEffect(() => {\r\n    authListener();\r\n  }, []);\r\n\r\n  return (\r\n    <section className={classes.login}>\r\n      <div className={classes.loginContainer}>\r\n        <input\r\n          type=\"text\"\r\n          autoFocus\r\n          required\r\n          value={email}\r\n          placeholder=\"E-mail\"\r\n          onChange={(e) => setEmail(e.target.value)}\r\n        />\r\n        <p className={classes.errorMsg}>{emailError}</p>\r\n        <input\r\n          type=\"password\"\r\n          placeholder=\"Password\"\r\n          required\r\n          value={password}\r\n          onChange={(e) => setPassword(e.target.value)}\r\n        />\r\n        <p className={classes.errorMsg}>{passwordError}</p>\r\n        <div className={classes.btnContainer}>\r\n          {\" \"}\r\n          {hasAccount ? (\r\n            <div>\r\n              <button className={classes.button} onClick={handleLogin}>\r\n                Sign in\r\n              </button>\r\n              <p>\r\n                Don't have an account?\r\n                <span onClick={handleHasAccount}>Sign up</span>\r\n              </p>\r\n            </div>\r\n          ) : (\r\n            <div>\r\n              <button className={classes.button} onClick={handleSignup}>\r\n                Sign up\r\n              </button>\r\n              <p>\r\n                Have an account?\r\n                <span onClick={handleHasAccount}>Sign in</span>\r\n              </p>\r\n            </div>\r\n          )}{\" \"}\r\n          <StyledFirebaseAuth\r\n            uiConfig={uiConfig}\r\n            firebaseAuth={firebase.auth()}\r\n          />\r\n        </div>\r\n      </div>\r\n    </section>\r\n  );\r\n};\r\n\r\nconst enhance = connect(({ firebase: { auth, profile } }) => ({\r\n  auth,\r\n  profile,\r\n}));\r\n\r\nexport default enhance(Login);\r\n","C:\\Dokumentai\\Projektai\\truthmeter\\truth-meter\\src\\Component\\RatePost\\RatePost.js",["91"],"import React, { Component } from \"react\";\r\nimport { ButtonGroup, Form, Modal } from \"react-bootstrap\";\r\nimport firebase from \"../../Config/firebase\";\r\nimport classes from \"./RatePost.module.css\";\r\n\r\nconst db = firebase.firestore();\r\n\r\nexport default class RatePost extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      hasLoaded: false,\r\n      hasRated: false,\r\n      show: false,\r\n      // posts ratingScore from firebase\r\n      ratingScore: \"\",\r\n      // current rate by user\r\n      rate: \"\",\r\n      // array with ratevalues from firebase\r\n      rates: [],\r\n    };\r\n  }\r\n\r\n  // check if the user has rated on the post on first render, check what the ratingScore of the post is\r\n  // and update state with the updated ratinScore, set state accordingly\r\n  componentDidMount() {\r\n    // get post and user refs\r\n    const userRef = db.collection(\"Users\").doc(this.props.auth.uid);\r\n    const postRef = db\r\n      .collection(\"Posts\")\r\n      .doc(this.props.location.pathname.slice(6));\r\n\r\n    userRef.get().then((doc) => {\r\n      this.setState({ hasLoaded: true });\r\n      if (doc.exists) {\r\n        if (\r\n          doc.data().userRatesID.includes(this.props.location.pathname.slice(6))\r\n        ) {\r\n          this.setState({ hasRated: true });\r\n          console.log(\"user has rated on this post!\");\r\n        } else {\r\n          console.log(\"user has not rated on this post!\");\r\n        }\r\n      }\r\n    });\r\n    // TypeError: Cannot read property 'ratingScore' of undefined, this happens when i go to an unavailable website? need to change link input\r\n\r\n    postRef.onSnapshot((doc) => {\r\n      this.setState({ ratingScore: doc.data().ratingScore });\r\n    });\r\n  }\r\n\r\n  updateRatingScore = async () => {\r\n    // get post ref\r\n    const postRef = db\r\n      .collection(\"Posts\")\r\n      .doc(this.props.location.pathname.slice(6));\r\n\r\n    const doc = await postRef.get();\r\n    // calculate the sum of rates array\r\n    const ratingScoreSum = doc\r\n      .data()\r\n      .rates.reduce((a, b) => parseInt(a) + parseInt(b), 0);\r\n    // update ratingScore with rates array average\r\n    await postRef.update({\r\n      ratingScore: ratingScoreSum / doc.data().rates.length,\r\n    });\r\n  };\r\n  updatePostsCol = async () => {\r\n    const postRef = db\r\n      .collection(\"Posts\")\r\n      .doc(this.props.location.pathname.slice(6));\r\n    // add current rate to the rates array in the Posts doc\r\n    const doc = await postRef.get();\r\n    await postRef.update({\r\n      rates: [...doc.data().rates, this.state.rate],\r\n    });\r\n    this.updateRatingScore();\r\n  };\r\n  updateUsersCol = () => {\r\n    // get user ref\r\n    const userRef = db.collection(\"Users\").doc(this.props.auth.uid);\r\n\r\n    return userRef.onSnapshot((doc) => {\r\n      // if user has rated the post\r\n      if (\r\n        doc.data().userRatesID.includes(this.props.location.pathname.slice(6))\r\n      ) {\r\n        this.setState({ hasRated: true });\r\n        // if user has NOT rated the post, update userRates field with post id and rating score in Users collection\r\n      } else {\r\n        userRef.update({\r\n          userRatesID: [\r\n            ...doc.data().userRatesID,\r\n\r\n            this.props.location.pathname.slice(6),\r\n          ],\r\n          userRatesScore: [...doc.data().userRatesScore, this.state.rate],\r\n        });\r\n      }\r\n    });\r\n  };\r\n\r\n  // submit rate to firebase with all the necessary updates\r\n  onSubmit = () => {\r\n    this.setState({ show: false });\r\n    this.updateUsersCol();\r\n    this.updatePostsCol();\r\n  };\r\n\r\n  // change rate state to what the rate sliders value is\r\n  onChangeRateInput = (value) => {\r\n    this.setState({ rate: value });\r\n  };\r\n\r\n  render() {\r\n    if (this.state.hasLoaded) {\r\n      return (\r\n        <div className={classes.RatePostContainer}>\r\n          {this.props.auth.isEmpty ? (\r\n            <span className={classes.RateThisPostUnclickable}>\r\n              Please log in to rate this post\r\n            </span>\r\n          ) : (\r\n            <div>\r\n              {\" \"}\r\n              {this.state.hasRated ? (\r\n                <div>\r\n                  <span className={classes.RateThisPostUnclickable}>\r\n                    You have already rated this post\r\n                  </span>\r\n                </div>\r\n              ) : (\r\n                <div>\r\n                  <span\r\n                    onClick={() => {\r\n                      this.setState({ show: true });\r\n                    }}\r\n                    className={classes.RateThisPost}\r\n                  >\r\n                    Rate this post\r\n                  </span>{\" \"}\r\n                </div>\r\n              )}\r\n            </div>\r\n          )}\r\n\r\n          <Modal\r\n            show={this.state.show}\r\n            onHide={() => {\r\n              this.setState({ show: false });\r\n            }}\r\n            centered={true}\r\n            size=\"lg\"\r\n            className={classes.RateModal}\r\n          >\r\n            <Modal.Body className={classes.RateModalBody}>\r\n              <Form>\r\n                <Form.Group controlId=\"formBasicRange\">\r\n                  <Form.Control\r\n                    color=\"success\"\r\n                    type=\"range\"\r\n                    value={this.state.rate}\r\n                    min=\"0\"\r\n                    max=\"100\"\r\n                    onChange={(e) => this.onChangeRateInput(e.target.value)}\r\n                  />\r\n                </Form.Group>\r\n              </Form>\r\n              <div style={{ textAlign: \"center\" }}>\r\n                {this.state.rate ? (\r\n                  <button\r\n                    className={classes.button}\r\n                    onClick={() => this.onSubmit()}\r\n                  >\r\n                    Rate this post as {this.state.rate}%\r\n                  </button>\r\n                ) : (\r\n                  <button className={classes.button} disabled>\r\n                    Use the slider to rate\r\n                  </button>\r\n                )}\r\n              </div>\r\n            </Modal.Body>\r\n          </Modal>\r\n        </div>\r\n      );\r\n    } else {\r\n      return null;\r\n    }\r\n  }\r\n}\r\n","C:\\Dokumentai\\Projektai\\truthmeter\\truth-meter\\src\\Component\\Profile\\Profile.js",[],"C:\\Dokumentai\\Projektai\\truthmeter\\truth-meter\\src\\Component\\Search\\Search.js",["92","93"],"import React, { Component } from \"react\";\r\n\r\nimport algoliasearch from \"algoliasearch/lite\";\r\nimport {\r\n  InstantSearch,\r\n  Configure,\r\n  connectSearchBox,\r\n} from \"react-instantsearch-dom\";\r\nimport Autocomplete from \"./Autocomplete\";\r\nimport \"./Search.css\";\r\n\r\nconst VirtalSearchBox = connectSearchBox(() => null);\r\n\r\nconst searchClient = algoliasearch(\r\n  \"5K3L830FWN\",\r\n  \"35d3843c2a54cf8a7a59d20ea50ef518\"\r\n);\r\n\r\nclass Search extends Component {\r\n  state = {\r\n    query: \"\",\r\n  };\r\n\r\n  onSuggestionSelected = (_, { suggestion }) => {\r\n    this.setState({\r\n      query: suggestion.name,\r\n    });\r\n    window.open(\"/post/\" + suggestion.objectID);\r\n  };\r\n\r\n  onSuggestionCleared = () => {\r\n    this.setState({\r\n      query: \"\",\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const { query } = this.state;\r\n\r\n    return (\r\n      <section className=\"section\">\r\n        {\" \"}\r\n        <div className=\"container\">\r\n          <InstantSearch indexName=\"Posts\" searchClient={searchClient}>\r\n            <Configure hitsPerPage={5} />\r\n            <Autocomplete\r\n              onSuggestionSelected={this.onSuggestionSelected}\r\n              onSuggestionCleared={this.onSuggestionCleared}\r\n            />\r\n          </InstantSearch>\r\n        </div>\r\n      </section>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Search;\r\n","C:\\Dokumentai\\Projektai\\truthmeter\\truth-meter\\src\\Component\\Search\\Autocomplete.js",[],"C:\\Dokumentai\\Projektai\\truthmeter\\truth-meter\\src\\Component\\RouterManager\\ProtectedRoute.js",["94"],"import React from \"react\";\r\nimport { Route, Redirect } from \"react-router-dom\";\r\n\r\n// check if user has logged, if true, then allow to render the component, if false, redirect somewhere else. This component goes to RouterManager\r\nfunction ProtectedRoute({\r\n  isAuth: isAuth,\r\n  component: Component,\r\n  redirectpathname: pathname,\r\n  ...rest\r\n}) {\r\n  return (\r\n    <Route\r\n      {...rest}\r\n      render={(props) => {\r\n        if (isAuth) {\r\n          return <Component />;\r\n        } else {\r\n          return (\r\n            <Redirect\r\n              to={{ pathname: pathname, state: { from: props.location } }}\r\n            />\r\n          );\r\n        }\r\n      }}\r\n    />\r\n  );\r\n}\r\n\r\nexport default ProtectedRoute;\r\n",{"ruleId":"95","replacedBy":"96"},{"ruleId":"97","replacedBy":"98"},{"ruleId":"99","severity":1,"message":"100","line":3,"column":10,"nodeType":"101","messageId":"102","endLine":3,"endColumn":19},{"ruleId":"99","severity":1,"message":"103","line":3,"column":21,"nodeType":"101","messageId":"102","endLine":3,"endColumn":24},{"ruleId":"99","severity":1,"message":"104","line":3,"column":26,"nodeType":"101","messageId":"102","endLine":3,"endColumn":29},{"ruleId":"99","severity":1,"message":"105","line":8,"column":7,"nodeType":"101","messageId":"102","endLine":8,"endColumn":9},{"ruleId":"106","severity":1,"message":"107","line":173,"column":13,"nodeType":"108","endLine":173,"endColumn":61},{"ruleId":"99","severity":1,"message":"109","line":4,"column":8,"nodeType":"101","messageId":"102","endLine":4,"endColumn":17},{"ruleId":"110","severity":1,"message":"111","line":112,"column":15,"nodeType":"112","endLine":112,"endColumn":43},{"ruleId":"99","severity":1,"message":"113","line":9,"column":10,"nodeType":"101","messageId":"102","endLine":9,"endColumn":14},{"ruleId":"114","severity":1,"message":"115","line":49,"column":9,"nodeType":"116","messageId":"117","endLine":58,"endColumn":10},{"ruleId":"114","severity":1,"message":"115","line":70,"column":9,"nodeType":"116","messageId":"117","endLine":78,"endColumn":10},{"ruleId":"118","severity":1,"message":"119","line":102,"column":6,"nodeType":"120","endLine":102,"endColumn":8,"suggestions":"121"},{"ruleId":"99","severity":1,"message":"122","line":2,"column":10,"nodeType":"101","messageId":"102","endLine":2,"endColumn":21},{"ruleId":"99","severity":1,"message":"123","line":12,"column":7,"nodeType":"101","messageId":"102","endLine":12,"endColumn":22},{"ruleId":"99","severity":1,"message":"124","line":38,"column":13,"nodeType":"101","messageId":"102","endLine":38,"endColumn":18},{"ruleId":"125","severity":1,"message":"126","line":6,"column":3,"nodeType":"127","messageId":"128","endLine":6,"endColumn":17,"fix":"129"},"no-native-reassign",["130"],"no-negated-in-lhs",["131"],"no-unused-vars","'Container' is defined but never used.","Identifier","unusedVar","'Col' is defined but never used.","'Row' is defined but never used.","'db' is assigned a value but never used.","jsx-a11y/iframe-has-title","<iframe> elements must have a unique title property.","JSXOpeningElement","'ReactTags' is defined but never used.","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","'user' is assigned a value but never used.","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'authListener'. Either include it or remove the dependency array.","ArrayExpression",["132"],"'ButtonGroup' is defined but never used.","'VirtalSearchBox' is assigned a value but never used.","'query' is assigned a value but never used.","no-useless-rename","Destructuring assignment isAuth unnecessarily renamed.","Property","unnecessarilyRenamed",{"range":"133","text":"134"},"no-global-assign","no-unsafe-negation",{"desc":"135","fix":"136"},[259,273],"isAuth","Update the dependencies array to be: [authListener]",{"range":"137","text":"138"},[2973,2975],"[authListener]"]