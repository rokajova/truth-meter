[{"C:\\Dokumentai\\Projektai\\truthmeter\\truth-meter\\src\\index.js":"1","C:\\Dokumentai\\Projektai\\truthmeter\\truth-meter\\src\\App.js":"2","C:\\Dokumentai\\Projektai\\truthmeter\\truth-meter\\src\\reportWebVitals.js":"3","C:\\Dokumentai\\Projektai\\truthmeter\\truth-meter\\src\\Component\\RouterManager\\RouterManager.js":"4","C:\\Dokumentai\\Projektai\\truthmeter\\truth-meter\\src\\Component\\Header\\Header.js":"5","C:\\Dokumentai\\Projektai\\truthmeter\\truth-meter\\src\\Component\\Main\\Main.js":"6","C:\\Dokumentai\\Projektai\\truthmeter\\truth-meter\\src\\Component\\PostCard\\PostCard.js":"7","C:\\Dokumentai\\Projektai\\truthmeter\\truth-meter\\src\\Config\\firebase.js":"8","C:\\Dokumentai\\Projektai\\truthmeter\\truth-meter\\src\\Component\\ViewPost\\ViewPost.js":"9","C:\\Dokumentai\\Projektai\\truthmeter\\truth-meter\\src\\Component\\NewPost\\NewPost.js":"10","C:\\Dokumentai\\Projektai\\truthmeter\\truth-meter\\src\\Config\\firebase-redux.js":"11","C:\\Dokumentai\\Projektai\\truthmeter\\truth-meter\\src\\Component\\Login\\Login.js":"12","C:\\Dokumentai\\Projektai\\truthmeter\\truth-meter\\src\\Component\\RatePost\\RatePost.js":"13","C:\\Dokumentai\\Projektai\\truthmeter\\truth-meter\\src\\Component\\Profile\\Profile.js":"14","C:\\Dokumentai\\Projektai\\truthmeter\\truth-meter\\src\\Component\\Search\\Search.js":"15","C:\\Dokumentai\\Projektai\\truthmeter\\truth-meter\\src\\Component\\Search\\Autocomplete.js":"16","C:\\Dokumentai\\Projektai\\truthmeter\\truth-meter\\src\\Component\\RouterManager\\ProtectedRoute.js":"17","C:\\Dokumentai\\Projektai\\truthmeter\\truth-meter\\src\\Component\\Login\\Signup.js":"18","C:\\Dokumentai\\Projektai\\truthmeter\\truth-meter\\src\\Component\\Login\\Reset.js":"19","C:\\Dokumentai\\Projektai\\truthmeter\\truth-meter\\src\\Component\\Info\\Info.js":"20"},{"size":547,"mtime":1616934899865,"results":"21","hashOfConfig":"22"},{"size":652,"mtime":1617426580851,"results":"23","hashOfConfig":"22"},{"size":362,"mtime":499162500000,"results":"24","hashOfConfig":"22"},{"size":4453,"mtime":1617503828524,"results":"25","hashOfConfig":"22"},{"size":3886,"mtime":1617645658084,"results":"26","hashOfConfig":"22"},{"size":3163,"mtime":1617653688251,"results":"27","hashOfConfig":"22"},{"size":1641,"mtime":1616953243042,"results":"28","hashOfConfig":"22"},{"size":496,"mtime":1617422749559,"results":"29","hashOfConfig":"22"},{"size":5864,"mtime":1617694343370,"results":"30","hashOfConfig":"22"},{"size":5143,"mtime":1617730359013,"results":"31","hashOfConfig":"22"},{"size":621,"mtime":1609154760951,"results":"32","hashOfConfig":"22"},{"size":3632,"mtime":1617440314006,"results":"33","hashOfConfig":"22"},{"size":6037,"mtime":1617447380372,"results":"34","hashOfConfig":"22"},{"size":2705,"mtime":1617696634645,"results":"35","hashOfConfig":"22"},{"size":1290,"mtime":1616976653658,"results":"36","hashOfConfig":"22"},{"size":1825,"mtime":1616976039723,"results":"37","hashOfConfig":"22"},{"size":713,"mtime":1616349753563,"results":"38","hashOfConfig":"22"},{"size":4331,"mtime":1617621589217,"results":"39","hashOfConfig":"22"},{"size":3547,"mtime":1617436685459,"results":"40","hashOfConfig":"22"},{"size":10153,"mtime":1617702347118,"results":"41","hashOfConfig":"22"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},"4djakx",{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"44"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"59"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"44"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"44"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"44"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"44"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"84","usedDeprecatedRules":"44"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87","usedDeprecatedRules":"44"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90","usedDeprecatedRules":"44"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93","usedDeprecatedRules":"44"},"C:\\Dokumentai\\Projektai\\truthmeter\\truth-meter\\src\\index.js",[],["94","95"],"C:\\Dokumentai\\Projektai\\truthmeter\\truth-meter\\src\\App.js",[],"C:\\Dokumentai\\Projektai\\truthmeter\\truth-meter\\src\\reportWebVitals.js",[],"C:\\Dokumentai\\Projektai\\truthmeter\\truth-meter\\src\\Component\\RouterManager\\RouterManager.js",[],"C:\\Dokumentai\\Projektai\\truthmeter\\truth-meter\\src\\Component\\Header\\Header.js",["96"],"import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport firebase from \"../../Config/firebase\";\r\nimport { Link, withRouter } from \"react-router-dom\";\r\nimport \"./Header.css\";\r\nimport logo from \"./logo.png\";\r\n\r\nclass Header extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      isOpen: false,\r\n      isClicked: false,\r\n    };\r\n  }\r\n\r\n  //THIS IS GOING TO BE USED FOR ADMINISTRATOR FUNCTIONS\r\n  // componentDidUpdate(nextProps, nextContext) {\r\n  //   if (!nextProps.auth.isEmpty) {\r\n  //     firebase\r\n  //       .auth()\r\n  //       .currentUser.getIdTokenResult()\r\n  //       .then((claim) => {\r\n  //         console.log(claim);\r\n  //       });\r\n  //   }\r\n  // }\r\n\r\n  toggle = () => {\r\n    this.setState({\r\n      isClicked: !this.state.isClicked,\r\n    });\r\n  };\r\n\r\n  toggleDropDownOff = () => {\r\n    this.setState({ isClicked: false });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        {this.props.auth.isLoaded && (\r\n          <nav className=\"NavbarItems\">\r\n            {\" \"}\r\n            <Link to=\"/\">\r\n              <img className=\"navbar-logo\" src={logo} />\r\n            </Link>\r\n            <Link to=\"/search\" onClick={this.toggleDropDownOff}>\r\n              <i className=\"fas fa-search \" />\r\n            </Link>\r\n            <div className=\"menu-icon\" onClick={this.toggle}>\r\n              <i\r\n                className={\r\n                  this.state.isClicked ? \"fas fa-times\" : \"fas fa-bars\"\r\n                }\r\n              ></i>\r\n            </div>\r\n            {this.props.auth.isEmpty ? (\r\n              <ul\r\n                className={\r\n                  this.state.isClicked ? \"nav-menu active\" : \"nav-menu\"\r\n                }\r\n              >\r\n                <Link onClick={this.toggle} className=\"nav-links\" to=\"/\">\r\n                  &nbsp; <i className=\"fas fa-home mr-2\" />\r\n                </Link>\r\n                <Link onClick={this.toggle} className=\"nav-links\" to=\"/login\">\r\n                  &nbsp; <i className=\"fas fa-user mr-2\" />\r\n                  <span>LOG IN</span>\r\n                </Link>\r\n                <Link onClick={this.toggle} className=\"nav-links\" to=\"/info\">\r\n                  &nbsp; <i className=\"fas fa-info-circle mr-2\" />\r\n                </Link>\r\n              </ul>\r\n            ) : (\r\n              <ul\r\n                className={\r\n                  this.state.isClicked ? \"nav-menu active\" : \"nav-menu\"\r\n                }\r\n              >\r\n                <Link onClick={this.toggle} className=\"nav-links\" to=\"/\">\r\n                  &nbsp; <i className=\"fas fa-home mr-2\" />\r\n                </Link>\r\n                <Link\r\n                  onClick={this.toggle}\r\n                  className=\"nav-links\"\r\n                  to=\"/new-post\"\r\n                >\r\n                  &nbsp; <i className=\"fas fa-plus mr-2\" />\r\n                  <span>NEW POST</span>\r\n                </Link>\r\n\r\n                <Link onClick={this.toggle} className=\"nav-links\" to=\"/profile\">\r\n                  &nbsp; <i className=\"fas fa-user mr-2\" />\r\n                  <span>PROFILE</span>\r\n                </Link>\r\n                <li\r\n                  className=\"nav-links\"\r\n                  onClick={() => {\r\n                    this.toggle();\r\n                    firebase.auth().signOut();\r\n                  }}\r\n                >\r\n                  &nbsp; <i className=\"fas fa-minus mr-2\" />\r\n                  <span>LOG OUT</span>\r\n                </li>\r\n                <Link onClick={this.toggle} className=\"nav-links\" to=\"/info\">\r\n                  &nbsp; <i className=\"fas fa-info-circle mr-1\" />\r\n                </Link>\r\n              </ul>\r\n            )}\r\n          </nav>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst enhance = connect(({ firebase: { auth, profile } }) => ({\r\n  auth,\r\n  profile,\r\n}));\r\n\r\nexport default enhance(withRouter(Header));\r\n","C:\\Dokumentai\\Projektai\\truthmeter\\truth-meter\\src\\Component\\Main\\Main.js",[],"C:\\Dokumentai\\Projektai\\truthmeter\\truth-meter\\src\\Component\\PostCard\\PostCard.js",["97","98","99","100"],"import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Container, Col, Row } from \"react-bootstrap\";\r\nimport GaugeChart from \"react-gauge-chart\";\r\nimport firebase from \"../../Config/firebase\";\r\nimport classes from \"./PostCard.module.css\";\r\n\r\nconst db = firebase.firestore();\r\n// Convert createDate timestamp seconds to string with result being YYYY/MM/DD HH:MM:SS\r\nexport function timeStampToString(ts) {\r\n  const date = new Date(ts * 1000);\r\n  return (\r\n    date.getFullYear() +\r\n    \"/\" +\r\n    (date.getMonth() + 1) +\r\n    \"/\" +\r\n    date.getDate() +\r\n    \" \" +\r\n    (date.getHours() < 10 ? \"0\" : \"\") +\r\n    date.getHours() +\r\n    \":\" +\r\n    (date.getMinutes() < 10 ? \"0\" : \"\") +\r\n    date.getMinutes() +\r\n    \":\" +\r\n    (date.getSeconds() < 10 ? \"0\" : \"\") +\r\n    date.getSeconds()\r\n  );\r\n}\r\n\r\nconst PostCard = (props) => {\r\n  return (\r\n    <Link\r\n      style={{ textDecoration: \"none\" }}\r\n      to={{ pathname: \"post/\" + props.data.id }}\r\n    >\r\n      <div className={classes.PostCardContainer}>\r\n        <div className={classes.Link}>\r\n          <span>{props.data.link}</span>\r\n        </div>\r\n        <div className={classes.Gauge}>\r\n          <GaugeChart\r\n            nrOfLevels={10}\r\n            cornerRadius={1}\r\n            colors={[\"red\", \"yellow\", \"forestgreen\"]}\r\n            arcWidth={0.3}\r\n            animate={true}\r\n            percent={props.data.ratingScore / 100}\r\n            needleColor=\"#fff\"\r\n            needleBaseColor=\"rgb(206, 223, 255)\"\r\n            hideText={true}\r\n            animDelay={0}\r\n          />\r\n        </div>\r\n      </div>\r\n    </Link>\r\n  );\r\n};\r\n\r\nexport default PostCard;\r\n",["101","102"],"C:\\Dokumentai\\Projektai\\truthmeter\\truth-meter\\src\\Config\\firebase.js",[],"C:\\Dokumentai\\Projektai\\truthmeter\\truth-meter\\src\\Component\\ViewPost\\ViewPost.js",["103","104"],"import React, { Component } from \"react\";\r\nimport { withRouter } from \"react-router-dom\";\r\nimport Collapse from \"react-bootstrap/Collapse\";\r\nimport firebase from \"../../Config/firebase\";\r\nimport classes from \"./ViewPost.module.css\";\r\nimport GaugeChart from \"react-gauge-chart\";\r\n\r\nconst db = firebase.firestore();\r\n\r\nclass ViewPost extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      post: {},\r\n      isLoaded: false,\r\n      infoOpen: false,\r\n    };\r\n  }\r\n\r\n  //If state is defined, populate post state with post data from this.props.location.state.post, set isLoaded to true.\r\n  //If state is not defined, run getPostByID function passing post id\r\n  componentDidMount() {\r\n    this.getPostByID(this.props.match.params.id);\r\n  }\r\n\r\n  // Convert createDate timestamp to string with result being YYYY/MM/DD HH:MM:SS\r\n  timeStampToString = (ts) => {\r\n    const date = new Date(ts * 1000);\r\n    return (\r\n      date.getFullYear() +\r\n      \"/\" +\r\n      (date.getMonth() + 1) +\r\n      \"/\" +\r\n      date.getDate() +\r\n      \" \" +\r\n      (date.getHours() < 10 ? \"0\" : \"\") +\r\n      date.getHours() +\r\n      \":\" +\r\n      (date.getMinutes() < 10 ? \"0\" : \"\") +\r\n      date.getMinutes() +\r\n      \":\" +\r\n      (date.getSeconds() < 10 ? \"0\" : \"\") +\r\n      date.getSeconds()\r\n    );\r\n  };\r\n\r\n  // get article from Posts collection in firestore, set article state with data\r\n  getPostByID = (postid) => {\r\n    db.collection(\"Posts\")\r\n      .doc(postid)\r\n      // do i need to use onSnapshot here, if im migrating GaugeChart to RatePost component?\r\n      .onSnapshot((doc) => {\r\n        if (doc.exists) {\r\n          this.setState(\r\n            {\r\n              post: doc.data(),\r\n            },\r\n            () => {\r\n              this.setState({\r\n                isLoaded: true,\r\n              });\r\n            }\r\n          );\r\n        } else {\r\n          this.props.history.push({ pathname: \"/\" });\r\n        }\r\n      });\r\n  };\r\n\r\n  render() {\r\n    if (this.state.isLoaded) {\r\n      // make the link have a protocol and the start ()\r\n      let link;\r\n      if (!this.state.post.link.slice(0, 4).includes(\"http\")) {\r\n        link = \"https://\" + this.state.post.link;\r\n      } else {\r\n        link = this.state.post.link;\r\n      }\r\n\r\n      return (\r\n        <div>\r\n          <div style={{ borderTop: \" 1px solid rgb(157, 187, 243)\" }}>\r\n            {\" \"}\r\n            <span className={classes.Link}>{this.state.post.link}</span>\r\n            <span\r\n              onClick={() => this.setState({ infoOpen: !this.state.infoOpen })}\r\n              className={classes.Dots}\r\n            />\r\n            <Collapse in={this.state.infoOpen}>\r\n              <div className={classes.MoreInfo}>\r\n                <div className={classes.MoreInfoEl}>\r\n                  <span\r\n                    style={{\r\n                      color: \"lightblue\",\r\n                    }}\r\n                  >\r\n                    Created by :\r\n                  </span>{\" \"}\r\n                  {this.state.post.createUserEmail.split(\"@\")[0]}\r\n                </div>\r\n                <div className={classes.MoreInfoEl}>\r\n                  {\" \"}\r\n                  <span\r\n                    style={{\r\n                      color: \"lightblue\",\r\n                    }}\r\n                  >\r\n                    Date Posted :\r\n                  </span>{\" \"}\r\n                  {this.timeStampToString(this.state.post.createDate.seconds)}\r\n                </div>\r\n                <div className={classes.MoreInfoEl}>\r\n                  <span\r\n                    style={{\r\n                      color: \"lightblue\",\r\n                    }}\r\n                  >\r\n                    Full link :\r\n                  </span>{\" \"}\r\n                  <a href={this.state.post.link} target=\"_blank\">\r\n                    {this.state.post.link}\r\n                  </a>\r\n                </div>\r\n                {this.state.post.ratingScore ? (\r\n                  <div className={classes.MoreInfoEl}>\r\n                    <span\r\n                      style={{\r\n                        color: \"lightblue\",\r\n                      }}\r\n                    >\r\n                      Truth score :\r\n                    </span>{\" \"}\r\n                    {Math.round(this.state.post.ratingScore)}%\r\n                  </div>\r\n                ) : (\r\n                  <div className={classes.MoreInfoEl}>\r\n                    <span\r\n                      style={{\r\n                        color: \"lightblue\",\r\n                      }}\r\n                    >\r\n                      Truth score :\r\n                    </span>{\" \"}\r\n                    This post has not been rated.\r\n                  </div>\r\n                )}\r\n                <div className={classes.MoreInfoEl}>\r\n                  <span\r\n                    style={{\r\n                      color: \"lightblue\",\r\n                    }}\r\n                  >\r\n                    Total rates :\r\n                  </span>{\" \"}\r\n                  {this.state.post.rates.length}\r\n                </div>\r\n              </div>\r\n            </Collapse>\r\n          </div>\r\n          <div className={classes.iframeContainer}>\r\n            <div className={classes.Gauge}>\r\n              <GaugeChart\r\n                nrOfLevels={10}\r\n                cornerRadius={1}\r\n                colors={[\"red\", \"yellow\", \"forestgreen\"]}\r\n                arcWidth={0.3}\r\n                animate={true}\r\n                percent={this.state.post.ratingScore / 100}\r\n                needleColor=\"#fff\"\r\n                needleBaseColor=\"rgb(206, 223, 255)\"\r\n                hideText={true}\r\n                animDelay={0}\r\n              />\r\n            </div>\r\n            <iframe className={classes.iframe} src={link} />\r\n          </div>\r\n        </div>\r\n      );\r\n    } else {\r\n      return <div></div>;\r\n    }\r\n  }\r\n}\r\n\r\nexport default withRouter(ViewPost);\r\n","C:\\Dokumentai\\Projektai\\truthmeter\\truth-meter\\src\\Component\\NewPost\\NewPost.js",["105"],"import React, { Component } from \"react\";\r\nimport firebase from \"../../Config/firebase\";\r\nimport { withRouter } from \"react-router-dom\";\r\nimport classes from \"./NewPost.module.css\";\r\nimport Recaptcha from \"react-recaptcha\";\r\n\r\nconst db = firebase.firestore();\r\n\r\nclass NewPost extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    \r\n    this.verifyCallback = this.verifyCallback.bind(this);\r\n    this.expiredCallback = this.expiredCallback.bind(this);\r\n\r\n    this.state = {\r\n      // change this to false and add the porper URL in the recapcha dashboard once I golive\r\n      isCaptchaVerified: false,\r\n\r\n      tags: [],\r\n\r\n      post: {\r\n        title: \"\",\r\n        link: \"\",\r\n        createDate: new Date(),\r\n        createUserID: \"\",\r\n        createUserName: \"\",\r\n        createUserEmail: \"\",\r\n        tags: [],\r\n        popularScore: \"\",\r\n        rates: [],\r\n        ratingScore: \"\",\r\n      },\r\n    };\r\n    this.reactTags = React.createRef();\r\n  }\r\n\r\n  //ReactTags function\r\n  onTagDelete(i) {\r\n    const tags = this.state.tags.slice(0);\r\n    tags.splice(i, 1);\r\n    this.setState({ tags });\r\n  }\r\n\r\n  //ReactTags function\r\n  onTagAddition(tag) {\r\n    const tags = [].concat(this.state.tags, tag);\r\n    this.setState({ tags });\r\n  }\r\n  //ReactTags input validate condition(must return a boolean)\r\n  onTagValidate() {\r\n    return this.state.tags.length < 4;\r\n  }\r\n\r\n  // set Post title state from the Input\r\n  onChangePostTitle = (value) => {\r\n    this.setState({\r\n      post: {\r\n        ...this.state.post,\r\n        title: value,\r\n      },\r\n    });\r\n  };\r\n\r\n  // set Post link state from the Input\r\n  onChangePostLink = (value) => {\r\n    this.setState({\r\n      post: {\r\n        ...this.state.post,\r\n        link: value,\r\n      },\r\n    });\r\n  };\r\n\r\n  //recaptcha verify\r\n  verifyCallback(response) {\r\n    if (response) {\r\n      this.setState({\r\n        isCaptchaVerified: true,\r\n      });\r\n    }\r\n  }\r\n\r\n  //recaptcha expired\r\n  expiredCallback() {\r\n    this.setState({\r\n      isCaptchaVerified: false,\r\n    });\r\n  }\r\n\r\n  //add doc to Posts collection, then redirect to home\r\n  submitPost() {\r\n    // get user reference\r\n    const userRef = db.collection(\"Users\").doc(this.props.auth.uid);\r\n\r\n    const post = this.state.post;\r\n    post.createUserID = this.props.auth.uid;\r\n    post.createUserEmail = this.props.auth.email;\r\n\r\n    // a temp workaround to the signup problem, where I cannot update the display name on the firebase signup function\r\n    // (see top commentin Signup component for detailed explanation)\r\n    // post.createUserName = firebase.auth().currentUser.displayName;\r\n\r\n    // tags working\r\n    // post.tags = this.state.tags;\r\n\r\n    db.collection(\"Posts\")\r\n      .add(post)\r\n      .then((res) => {\r\n        return userRef.get().then((doc) => {\r\n          userRef.update({ userPosts: [...doc.data().userPosts, res.id] });\r\n        });\r\n      })\r\n      .catch((err) => console.log(err));\r\n    this.props.history.push(\"/\");\r\n  }\r\n\r\n  render() {\r\n    // Check is string is an URL\r\n    function is_url(str) {\r\n      let regexp = /^(?:(?:https?|ftp):\\/\\/)?(?:(?!(?:10|127)(?:\\.\\d{1,3}){3})(?!(?:169\\.254|192\\.168)(?:\\.\\d{1,3}){2})(?!172\\.(?:1[6-9]|2\\d|3[0-1])(?:\\.\\d{1,3}){2})(?:[1-9]\\d?|1\\d\\d|2[01]\\d|22[0-3])(?:\\.(?:1?\\d{1,2}|2[0-4]\\d|25[0-5])){2}(?:\\.(?:[1-9]\\d?|1\\d\\d|2[0-4]\\d|25[0-4]))|(?:(?:[a-z\\u00a1-\\uffff0-9]-*)*[a-z\\u00a1-\\uffff0-9]+)(?:\\.(?:[a-z\\u00a1-\\uffff0-9]-*)*[a-z\\u00a1-\\uffff0-9]+)*(?:\\.(?:[a-z\\u00a1-\\uffff]{2,})))(?::\\d{2,5})?(?:\\/\\S*)?$/;\r\n      if (regexp.test(str)) {\r\n        return true;\r\n      } else {\r\n        return false;\r\n      }\r\n    }\r\n\r\n    // Must return True in order to Submit a post\r\n    const SumbmitCondition =\r\n      is_url(this.state.post.link) && this.state.isCaptchaVerified;\r\n\r\n    return (\r\n      <section className={classes.NewPost}>\r\n        <div className={classes.NewPostContainer}>\r\n          <div>\r\n            {\" \"}\r\n            <input\r\n              type=\"text\"\r\n              placeholder=\"Enter a link and click Submit...\"\r\n              autoFocus\r\n              required\r\n              value={this.state.post.link}\r\n              onChange={(e) => this.onChangePostLink(e.target.value)}\r\n              value={this.state.post.link}\r\n            />{\" \"}\r\n          </div>\r\n          <div className={classes.Recaptcha}>\r\n            {\" \"}\r\n            <Recaptcha\r\n              sitekey=\"6LdqLJoaAAAAAFRLwSy6kLGzasP9ChtQQnIIo554\"\r\n              render=\"explicit\"\r\n              verifyCallback={this.verifyCallback}\r\n              expiredCallback={this.expiredCallback}\r\n              theme=\"dark\"\r\n            />\r\n          </div>\r\n\r\n          <div className={classes.ButtonContainer}>\r\n            {SumbmitCondition ? (\r\n              <button\r\n                className={classes.button}\r\n                onClick={() => this.submitPost()}\r\n              >\r\n                Submit\r\n              </button>\r\n            ) : (\r\n              <button className={classes.button} disabled>\r\n                Submit\r\n              </button>\r\n            )}\r\n          </div>\r\n        </div>\r\n\r\n      </section>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withRouter(NewPost);\r\n","C:\\Dokumentai\\Projektai\\truthmeter\\truth-meter\\src\\Config\\firebase-redux.js",[],"C:\\Dokumentai\\Projektai\\truthmeter\\truth-meter\\src\\Component\\Login\\Login.js",["106","107","108"],"import React, { useState, useEffect } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport StyledFirebaseAuth from \"react-firebaseui/StyledFirebaseAuth\";\r\nimport firebase from \"../../Config/firebase\";\r\nimport classes from \"./Login.module.css\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst Login = () => {\r\n  // required states for authentication\r\n  const [user, setUser] = useState(\"\");\r\n  const [email, setEmail] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n  const [emailError, setEmailError] = useState(\"\");\r\n  const [passwordError, setPasswordError] = useState(\"\");\r\n\r\n  // config for google authentication\r\n  const uiConfig = {\r\n    signInFlow: \"popup\",\r\n    signInSuccessUrl: \"/\",\r\n    signInOptions: [firebase.auth.GoogleAuthProvider.PROVIDER_ID],\r\n  };\r\n\r\n  // clears login and signin state\r\n  const clearInputs = () => {\r\n    setEmail(\"\");\r\n    setPassword(\"\");\r\n  };\r\n\r\n  // clears errors state\r\n  const clearErrors = () => {\r\n    setEmailError(\"\");\r\n    setPasswordError(\"\");\r\n  };\r\n\r\n  // signs in with existing user if there are no errors described in the switch statement\r\n  // if there are errors, set state with the corresponding error\r\n  const handleLogin = () => {\r\n    clearErrors();\r\n    firebase\r\n      .auth()\r\n      .signInWithEmailAndPassword(email, password)\r\n      .catch((err) => {\r\n        switch (err.code) {\r\n          case \"auth/invalid-email\":\r\n          case \"auth/user-disabled\":\r\n          case \"auth/user-not-found\":\r\n            setEmailError(err.message);\r\n            break;\r\n          case \"auth/wrong-password\":\r\n            setPasswordError(err.message);\r\n            break;\r\n        }\r\n      });\r\n  };\r\n\r\n  // checks for auth state changes, set state accordingly\r\n  const authListener = () => {\r\n    firebase.auth().onAuthStateChanged((user) => {\r\n      if (user) {\r\n        clearInputs();\r\n        setUser(user);\r\n      } else {\r\n        setUser(\"\");\r\n      }\r\n    });\r\n  };\r\n\r\n  // this hook is ran on every render\r\n  useEffect(() => {\r\n    authListener();\r\n  }, []);\r\n\r\n  return (\r\n    <section className={classes.login}>\r\n      <div className={classes.loginContainer}>\r\n        <input\r\n          type=\"text\"\r\n          autoFocus\r\n          required\r\n          value={email}\r\n          placeholder=\"E-mail\"\r\n          onChange={(e) => setEmail(e.target.value)}\r\n        />\r\n        <p className={classes.errorMsg}>{emailError}</p>\r\n        <input\r\n          type=\"password\"\r\n          placeholder=\"Password\"\r\n          required\r\n          value={password}\r\n          onChange={(e) => setPassword(e.target.value)}\r\n        />\r\n        <p className={classes.errorMsg}>{passwordError}</p>\r\n        <div className={classes.btnContainer}>\r\n          {\" \"}\r\n          <div>\r\n            <button className={classes.button} onClick={handleLogin}>\r\n              Log in\r\n            </button>\r\n            <p>\r\n              Don't have an account?\r\n              <Link style={{ textDecoration: \"none\" }} to=\"/signup\">\r\n                {\" \"}\r\n                <span>Sign up</span>\r\n              </Link>\r\n            </p>\r\n            <p>\r\n              Forgot password?\r\n              <Link style={{ textDecoration: \"none\" }} to=\"/forgot-password\">\r\n                <span>Reset password</span>\r\n              </Link>\r\n            </p>\r\n          </div>\r\n          <StyledFirebaseAuth\r\n            uiConfig={uiConfig}\r\n            firebaseAuth={firebase.auth()}\r\n          />\r\n        </div>\r\n      </div>\r\n    </section>\r\n  );\r\n};\r\n\r\nconst enhance = connect(({ firebase: { auth, profile } }) => ({\r\n  auth,\r\n  profile,\r\n}));\r\n\r\nexport default enhance(Login);\r\n","C:\\Dokumentai\\Projektai\\truthmeter\\truth-meter\\src\\Component\\RatePost\\RatePost.js",[],"C:\\Dokumentai\\Projektai\\truthmeter\\truth-meter\\src\\Component\\Profile\\Profile.js",[],"C:\\Dokumentai\\Projektai\\truthmeter\\truth-meter\\src\\Component\\Search\\Search.js",["109","110"],"import React, { Component } from \"react\";\r\n\r\nimport algoliasearch from \"algoliasearch/lite\";\r\nimport {\r\n  InstantSearch,\r\n  Configure,\r\n  connectSearchBox,\r\n} from \"react-instantsearch-dom\";\r\nimport Autocomplete from \"./Autocomplete\";\r\nimport \"./Search.css\";\r\n\r\nconst VirtalSearchBox = connectSearchBox(() => null);\r\n\r\nconst searchClient = algoliasearch(\r\n  \"5K3L830FWN\",\r\n  \"35d3843c2a54cf8a7a59d20ea50ef518\"\r\n);\r\n\r\nclass Search extends Component {\r\n  state = {\r\n    query: \"\",\r\n  };\r\n\r\n  onSuggestionSelected = (_, { suggestion }) => {\r\n    this.setState({\r\n      query: suggestion.name,\r\n    });\r\n    window.open(\"/post/\" + suggestion.objectID);\r\n  };\r\n\r\n  onSuggestionCleared = () => {\r\n    this.setState({\r\n      query: \"\",\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const { query } = this.state;\r\n\r\n    return (\r\n      <section className=\"section\">\r\n        {\" \"}\r\n        <div className=\"container\">\r\n          <InstantSearch indexName=\"Posts\" searchClient={searchClient}>\r\n            <Configure hitsPerPage={5} />\r\n            <Autocomplete\r\n              onSuggestionSelected={this.onSuggestionSelected}\r\n              onSuggestionCleared={this.onSuggestionCleared}\r\n            />\r\n          </InstantSearch>\r\n        </div>\r\n      </section>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Search;\r\n","C:\\Dokumentai\\Projektai\\truthmeter\\truth-meter\\src\\Component\\Search\\Autocomplete.js",[],"C:\\Dokumentai\\Projektai\\truthmeter\\truth-meter\\src\\Component\\RouterManager\\ProtectedRoute.js",["111"],"import React from \"react\";\r\nimport { Route, Redirect } from \"react-router-dom\";\r\n\r\n// check if user has logged, if true, then allow to render the component, if false, redirect somewhere else. This component goes to RouterManager\r\nfunction ProtectedRoute({\r\n  isAuth: isAuth,\r\n  component: Component,\r\n  redirectpathname: pathname,\r\n  ...rest\r\n}) {\r\n  return (\r\n    <Route\r\n      {...rest}\r\n      render={(props) => {\r\n        if (isAuth) {\r\n          return <Component />;\r\n        } else {\r\n          return (\r\n            <Redirect\r\n              to={{ pathname: pathname, state: { from: props.location } }}\r\n            />\r\n          );\r\n        }\r\n      }}\r\n    />\r\n  );\r\n}\r\n\r\nexport default ProtectedRoute;\r\n","C:\\Dokumentai\\Projektai\\truthmeter\\truth-meter\\src\\Component\\Login\\Signup.js",["112","113","114"],"import React, { useState, useEffect } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport StyledFirebaseAuth from \"react-firebaseui/StyledFirebaseAuth\";\r\nimport firebase from \"../../Config/firebase\";\r\nimport classes from \"./Login.module.css\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\n// The createUserWithEmailAndPassword and cloud functions don't work well with eachother.\r\n// Since I'm using a function to create a document with created users each time a createUserWithEmailAndPassword fire\r\n// the cloud function does not pick up the the promise function to create a display name and while it does create a display name, which can be accessed under\r\n// \"firebase.auth().currentUser.displayName\" the document in the Users collection does not update accordingly.\r\n// https://stackoverflow.com/questions/40389946/how-do-i-set-the-displayname-of-firebase-user/40429080 <- does not solve the cloud function issue, but does change the display name\r\n// https://stackoverflow.com/questions/48741932/firebase-authfunctions-create-user-with-displayname <- might solve the isuue, will come back to it later on.\r\n// https://stackoverflow.com/questions/43509021/how-to-add-username-with-email-and-password-in-firebase <- possible solution\r\n\r\nconst Signup = () => {\r\n  // required states for authentication\r\n  const [user, setUser] = useState(\"\");\r\n\r\n  const [email, setEmail] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n\r\n  const [emailError, setEmailError] = useState(\"\");\r\n  const [passwordError, setPasswordError] = useState(\"\");\r\n\r\n  // config for google authentication\r\n  const uiConfig = {\r\n    signInFlow: \"popup\",\r\n    signInSuccessUrl: \"/\",\r\n    signInOptions: [firebase.auth.GoogleAuthProvider.PROVIDER_ID],\r\n  };\r\n\r\n  // clears login and signin state\r\n  const clearInputs = () => {\r\n    setEmail(\"\");\r\n    setPassword(\"\");\r\n  };\r\n\r\n  // clears errors state\r\n  const clearErrors = () => {\r\n    setEmailError(\"\");\r\n    setPasswordError(\"\");\r\n  };\r\n\r\n  // signs up a new user if there are no errors described in the switch statement\r\n  // if there are errors, set state with the corresponding error\r\n  const handleSignup = () => {\r\n    clearErrors();\r\n    firebase\r\n      .auth()\r\n      .createUserWithEmailAndPassword(email, password)\r\n      .catch((err) => {\r\n        switch (err.code) {\r\n          case \"auth/email-already-in-use\":\r\n          case \"auth/invalid-email\":\r\n            setEmailError(err.message);\r\n            break;\r\n          case \"auth/weak-password\":\r\n            setPasswordError(err.message);\r\n            break;\r\n        }\r\n      });\r\n  };\r\n\r\n  // checks for auth state changes, set state accordingly\r\n  const authListener = () => {\r\n    firebase.auth().onAuthStateChanged((user) => {\r\n      if (user) {\r\n        clearInputs();\r\n        setUser(user);\r\n      } else {\r\n        setUser(\"\");\r\n      }\r\n    });\r\n  };\r\n\r\n  // this hook is ran on every render\r\n  useEffect(() => {\r\n    authListener();\r\n  }, []);\r\n\r\n  return (\r\n    <section className={classes.login}>\r\n      <div className={classes.loginContainer}>\r\n        <input\r\n          type=\"text\"\r\n          autoFocus\r\n          required\r\n          value={email}\r\n          placeholder=\"E-mail\"\r\n          onChange={(e) => setEmail(e.target.value)}\r\n        />\r\n        <p className={classes.errorMsg}>{emailError}</p>\r\n        <input\r\n          type=\"password\"\r\n          placeholder=\"Password\"\r\n          required\r\n          value={password}\r\n          onChange={(e) => setPassword(e.target.value)}\r\n        />\r\n        <p className={classes.errorMsg}>{passwordError}</p>\r\n\r\n        <div className={classes.btnContainer}>\r\n          {\" \"}\r\n          <div>\r\n            <button className={classes.button} onClick={handleSignup}>\r\n              Sign up\r\n            </button>\r\n            <p>\r\n              Have an account?\r\n              <Link style={{ textDecoration: \"none\" }} to=\"login\">\r\n                {\" \"}\r\n                <span>Log in</span>\r\n              </Link>\r\n            </p>\r\n          </div>\r\n          <StyledFirebaseAuth\r\n            uiConfig={uiConfig}\r\n            firebaseAuth={firebase.auth()}\r\n          />\r\n        </div>\r\n      </div>\r\n    </section>\r\n  );\r\n};\r\n\r\nconst enhance = connect(({ firebase: { auth, profile } }) => ({\r\n  auth,\r\n  profile,\r\n}));\r\n\r\nexport default enhance(Signup);\r\n","C:\\Dokumentai\\Projektai\\truthmeter\\truth-meter\\src\\Component\\Login\\Reset.js",["115","116","117"],"import React, { useState, useEffect } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport StyledFirebaseAuth from \"react-firebaseui/StyledFirebaseAuth\";\r\nimport firebase from \"../../Config/firebase\";\r\nimport classes from \"./Login.module.css\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst Reset = () => {\r\n  // required states for authentication\r\n  const [user, setUser] = useState(\"\");\r\n  const [email, setEmail] = useState(\"\");\r\n  const [emailError, setEmailError] = useState(\"\");\r\n  const [message, setMessage] = useState(\"\");\r\n  const [btnDisabled, setBtnDisabled] = useState(false);\r\n\r\n  // config for google authentication\r\n  const uiConfig = {\r\n    signInFlow: \"popup\",\r\n    signInSuccessUrl: \"/\",\r\n    signInOptions: [firebase.auth.GoogleAuthProvider.PROVIDER_ID],\r\n  };\r\n\r\n  // clears login and signin state\r\n  const clearInputs = () => {\r\n    setEmail(\"\");\r\n  };\r\n  // clears errors state\r\n  const clearErrors = () => {\r\n    setEmailError(\"\");\r\n  };\r\n\r\n  // signs in with existing user if there are no errors described in the switch statement\r\n  // if there are errors, set state with the corresponding error\r\n  async function handleReset() {\r\n    clearErrors();\r\n    setMessage(\"\");\r\n    await firebase\r\n      .auth()\r\n      .sendPasswordResetEmail(email)\r\n      .then(function () {\r\n        setMessage(\"Check your inbox for further steps\");\r\n        setBtnDisabled(true);\r\n      })\r\n      .catch((err) => {\r\n        switch (err.code) {\r\n          case \"auth/invalid-email\":\r\n          case \"auth/user-disabled\":\r\n          case \"auth/user-not-found\":\r\n            setEmailError(err.message);\r\n            break;\r\n        }\r\n      });\r\n  }\r\n\r\n  // checks for auth state changes, set state accordingly\r\n  const authListener = () => {\r\n    firebase.auth().onAuthStateChanged((user) => {\r\n      if (user) {\r\n        clearInputs();\r\n        setUser(user);\r\n      } else {\r\n        setUser(\"\");\r\n      }\r\n    });\r\n  };\r\n\r\n  // this hook is ran on every render\r\n  useEffect(() => {\r\n    authListener();\r\n  }, []);\r\n\r\n  return (\r\n    <section className={classes.login}>\r\n      <div className={classes.loginContainer}>\r\n        <input\r\n          type=\"text\"\r\n          autoFocus\r\n          required\r\n          value={email}\r\n          placeholder=\"E-mail\"\r\n          onChange={(e) => setEmail(e.target.value)}\r\n        />\r\n\r\n        {emailError && <p className={classes.errorMsg}>{emailError}</p>}\r\n        {message && <p className={classes.successMsg}>{message}</p>}\r\n\r\n        <div className={classes.btnContainer}>\r\n          {\" \"}\r\n          <div>\r\n            <button\r\n              disabled={btnDisabled}\r\n              className={classes.button}\r\n              onClick={handleReset}\r\n            >\r\n              Reset password\r\n            </button>\r\n            <p>\r\n              Have an account?\r\n              <Link style={{ textDecoration: \"none\" }} to=\"/login\">\r\n                {\" \"}\r\n                <span>Log in</span>\r\n              </Link>\r\n            </p>\r\n            <p>\r\n              Don't have an account?\r\n              <Link style={{ textDecoration: \"none\" }} to=\"/signup\">\r\n                {\" \"}\r\n                <span>Sign up</span>\r\n              </Link>\r\n            </p>\r\n          </div>\r\n          <StyledFirebaseAuth\r\n            uiConfig={uiConfig}\r\n            firebaseAuth={firebase.auth()}\r\n          />\r\n        </div>\r\n      </div>\r\n    </section>\r\n  );\r\n};\r\n\r\nconst enhance = connect(({ firebase: { auth, profile } }) => ({\r\n  auth,\r\n  profile,\r\n}));\r\n\r\nexport default enhance(Reset);\r\n","C:\\Dokumentai\\Projektai\\truthmeter\\truth-meter\\src\\Component\\Info\\Info.js",["118"],"import React, { useState } from \"react\";\r\nimport classes from \"./Info.module.css\";\r\nimport Tabs from \"react-bootstrap/Tabs\";\r\nimport Tab from \"react-bootstrap/Tab\";\r\n\r\nfunction Info() {\r\n  return (\r\n    <div className={classes.Container}>\r\n      <Tabs\r\n        className=\"d-flex align-items-center justify-content-center  border-0 \"\r\n        defaultActiveKey=\"faq\"\r\n      >\r\n        <Tab eventKey=\"faq\" title=\"FAQ\">\r\n          <div className={classes.Row}>\r\n            <div className={classes.Col}>\r\n              <div className={classes.Title}>What is Truthmeter.link?</div>\r\n              <span\r\n                style={{\r\n                  border: \"1px solid  rgb(157, 187, 243)\",\r\n                  padding: \"7px\",\r\n                  marginBottom: \"15px\",\r\n                }}\r\n              >\r\n                A website with a mission to help reduce the increasing spread of\r\n                misinformation on the internet.\r\n              </span>\r\n              <div className={classes.Title}>How does it work?</div>\r\n              <span\r\n                style={{\r\n                  border: \"1px solid  rgb(157, 187, 243)\",\r\n                  padding: \"7px\",\r\n                  marginBottom: \"15px\",\r\n                }}\r\n              >\r\n                Users can browse through the database of links submitted by\r\n                other users and view the Truth Score of each link. Registered\r\n                users can also post links and rate posts, expanding Truthmeters\r\n                database of links and their Truth Scores.\r\n              </span>\r\n              <div className={classes.Title}>How to create a post?</div>\r\n              <span\r\n                style={{\r\n                  border: \"1px solid  rgb(157, 187, 243)\",\r\n                  padding: \"7px\",\r\n                  marginBottom: \"15px\",\r\n                }}\r\n              >\r\n                Once you have{\" \"}\r\n                <a href=\"/signup\" target=\"_blank\" rel=\"noopener noreferrer\">\r\n                  created an account\r\n                </a>{\" \"}\r\n                , you can create a new post by clicking{\" \"}\r\n                <mark\r\n                  style={{\r\n                    backgroundColor: \"#6d76f7\",\r\n                    color: \"white\",\r\n                    borderRadius: \"5px\",\r\n                  }}\r\n                >\r\n                  NEW POST\r\n                </mark>{\" \"}\r\n                in the header above. Then just type or paste your desired link,\r\n                pass the verification and click{\" \"}\r\n                <mark\r\n                  style={{\r\n                    backgroundColor: \"#6d76f7\",\r\n                    color: \"white\",\r\n                    borderRadius: \"5px\",\r\n                  }}\r\n                >\r\n                  Submit\r\n                </mark>\r\n                . Your new post will now appear in the top of the list in the\r\n                main page of the website.\r\n              </span>\r\n              <div className={classes.Title}>\r\n                Why my posted link doesn't appear in the post?\r\n              </div>\r\n              <span\r\n                style={{\r\n                  border: \"1px solid  rgb(157, 187, 243)\",\r\n                  padding: \"7px\",\r\n                  marginBottom: \"15px\",\r\n                }}\r\n              >\r\n                If you get an error with a message <i>\"refused to connect\"</i>,\r\n                that means that website does not allow embedding of it's links.\r\n                Check the websites embedding options to see if they provide a\r\n                working link to share.\r\n                <br />\r\n                If you get an error with a message{\" \"}\r\n                <i>\"server IP address could not be found\"</i>, that means that\r\n                link does not exist. Check spelling.\r\n              </span>\r\n              <div className={classes.Title}>How to rate a post?</div>\r\n              <span\r\n                style={{\r\n                  border: \"1px solid  rgb(157, 187, 243)\",\r\n                  padding: \"7px\",\r\n                  marginBottom: \"15px\",\r\n                }}\r\n              >\r\n                Once you have created an account, you can rate a post by\r\n                clicking{\" \"}\r\n                <mark\r\n                  style={{\r\n                    backgroundColor: \"#6d76f7\",\r\n                    color: \"white\",\r\n                    borderRadius: \"5px\",\r\n                  }}\r\n                >\r\n                  Rate this post\r\n                </mark>{\" \"}\r\n                button on the bottom of the posts page. Then use the slider to\r\n                rate the post from 1 to 100 and click{\" \"}\r\n                <mark\r\n                  style={{\r\n                    backgroundColor: \"#6d76f7\",\r\n                    color: \"white\",\r\n                    borderRadius: \"5px\",\r\n                  }}\r\n                >\r\n                  Rate this post\r\n                </mark>{\" \"}\r\n                . Your new rate will update the Truth Score of the post.\r\n              </span>\r\n              <div className={classes.Title}>What is the Truth Score?</div>\r\n              <span\r\n                style={{\r\n                  border: \"1px solid  rgb(157, 187, 243)\",\r\n                  padding: \"7px\",\r\n                  marginBottom: \"15px\",\r\n                }}\r\n              >\r\n                The Truth Score is the main arbiter in determining the posts\r\n                content legitimacy. <br /> Each post will have a gauge attached\r\n                to it displaying the Truth Score of the post. If the needle is\r\n                pointing at red - the information is most likely to be false, if\r\n                green - most likely true. <br /> A user may rate a post only\r\n                once. When a rate has been submitted the Truth Score will update\r\n                and the gauge needle will move in real time displaying the new\r\n                Truth Score. Only You, the users, are in control of the Truth\r\n                Score, that is why rating is strongly ecouraged.\r\n              </span>\r\n              <div className={classes.Title}>What are the rules?</div>\r\n              <span\r\n                style={{\r\n                  border: \"1px solid  rgb(157, 187, 243)\",\r\n                  padding: \"7px\",\r\n                  marginBottom: \"15px\",\r\n                }}\r\n              >\r\n                Find out about the rules under the Rules tab.\r\n              </span>\r\n            </div>\r\n          </div>\r\n        </Tab>\r\n        <Tab eventKey=\"rules\" title=\"Rules\">\r\n          {\" \"}\r\n          <div className={classes.Row}>\r\n            <div className={classes.Col}>\r\n              {\" \"}\r\n              <span\r\n                style={{\r\n                  border: \"1px solid  rgb(157, 187, 243)\",\r\n                  padding: \"7px\",\r\n                  marginBottom: \"15px\",\r\n                }}\r\n              >\r\n                <strong>1.</strong> By using this website, you agree to all the\r\n                rules and terms stated in this section.\r\n              </span>\r\n              <span\r\n                style={{\r\n                  border: \"1px solid  rgb(157, 187, 243)\",\r\n                  padding: \"7px\",\r\n                  marginBottom: \"15px\",\r\n                }}\r\n              >\r\n                <strong>2.</strong> Truthmeter is not responsible for the\r\n                content containing in posted links. Truthmeter does not\r\n                associate or endorse any and all content on posted links. The\r\n                links posted are not part of this website and users may view\r\n                them at their own risk.\r\n              </span>\r\n              <span\r\n                style={{\r\n                  border: \"1px solid  rgb(157, 187, 243)\",\r\n                  padding: \"7px\",\r\n                  marginBottom: \"15px\",\r\n                }}\r\n              >\r\n                <strong>3.</strong> Do not upload links that are illegal or\r\n                breaks any global or local laws.\r\n              </span>\r\n              <span\r\n                style={{\r\n                  border: \"1px solid  rgb(157, 187, 243)\",\r\n                  padding: \"7px\",\r\n                  marginBottom: \"15px\",\r\n                }}\r\n              >\r\n                <strong>4.</strong> Posting links that contain legal NSFW\r\n                content are allowed and will not be removed.\r\n              </span>\r\n              <span\r\n                style={{\r\n                  border: \"1px solid  rgb(157, 187, 243)\",\r\n                  padding: \"7px\",\r\n                  marginBottom: \"15px\",\r\n                }}\r\n              >\r\n                <strong>5.</strong> Do not upload links that contain content\r\n                containing, in any shape or form, child pornography, any content\r\n                of minors under the age of 18 shown as being naked or engaging\r\n                in sexual acts.\r\n              </span>\r\n              <span\r\n                style={{\r\n                  border: \"1px solid  rgb(157, 187, 243)\",\r\n                  padding: \"7px\",\r\n                  marginBottom: \"15px\",\r\n                }}\r\n              >\r\n                <strong>6.</strong> Do not upload links that contain personal\r\n                information of any person or company for malicious intent\r\n                (\"doxing\").\r\n              </span>\r\n              <span\r\n                style={{\r\n                  border: \"1px solid  rgb(157, 187, 243)\",\r\n                  padding: \"7px\",\r\n                  marginBottom: \"15px\",\r\n                }}\r\n              >\r\n                <strong>7.</strong> Do not spam or flood the website.\r\n              </span>\r\n              <span\r\n                style={{\r\n                  border: \"1px solid  rgb(157, 187, 243)\",\r\n                  padding: \"7px\",\r\n                  marginBottom: \"15px\",\r\n                }}\r\n              >\r\n                <strong>8.</strong> If you found a bug or an exploit for this\r\n                website, please contact me <a href=\"mailto: contact@truthmeter.link\">contact@truthmeter.link </a>.\r\n              </span>\r\n            </div>\r\n          </div>\r\n        </Tab>\r\n      </Tabs>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Info;\r\n",{"ruleId":"119","replacedBy":"120"},{"ruleId":"121","replacedBy":"122"},{"ruleId":"123","severity":1,"message":"124","line":46,"column":15,"nodeType":"125","endLine":46,"endColumn":57},{"ruleId":"126","severity":1,"message":"127","line":3,"column":10,"nodeType":"128","messageId":"129","endLine":3,"endColumn":19},{"ruleId":"126","severity":1,"message":"130","line":3,"column":21,"nodeType":"128","messageId":"129","endLine":3,"endColumn":24},{"ruleId":"126","severity":1,"message":"131","line":3,"column":26,"nodeType":"128","messageId":"129","endLine":3,"endColumn":29},{"ruleId":"126","severity":1,"message":"132","line":8,"column":7,"nodeType":"128","messageId":"129","endLine":8,"endColumn":9},{"ruleId":"119","replacedBy":"133"},{"ruleId":"121","replacedBy":"134"},{"ruleId":"135","severity":1,"message":"136","line":120,"column":50,"nodeType":"137","endLine":120,"endColumn":65},{"ruleId":"138","severity":1,"message":"139","line":175,"column":13,"nodeType":"125","endLine":175,"endColumn":61},{"ruleId":"140","severity":1,"message":"141","line":145,"column":15,"nodeType":"137","endLine":145,"endColumn":43},{"ruleId":"126","severity":1,"message":"142","line":10,"column":10,"nodeType":"128","messageId":"129","endLine":10,"endColumn":14},{"ruleId":"143","severity":1,"message":"144","line":43,"column":9,"nodeType":"145","messageId":"146","endLine":52,"endColumn":10},{"ruleId":"147","severity":1,"message":"148","line":71,"column":6,"nodeType":"149","endLine":71,"endColumn":8,"suggestions":"150"},{"ruleId":"126","severity":1,"message":"151","line":12,"column":7,"nodeType":"128","messageId":"129","endLine":12,"endColumn":22},{"ruleId":"126","severity":1,"message":"152","line":38,"column":13,"nodeType":"128","messageId":"129","endLine":38,"endColumn":18},{"ruleId":"153","severity":1,"message":"154","line":6,"column":3,"nodeType":"155","messageId":"156","endLine":6,"endColumn":17,"fix":"157"},{"ruleId":"126","severity":1,"message":"142","line":18,"column":10,"nodeType":"128","messageId":"129","endLine":18,"endColumn":14},{"ruleId":"143","severity":1,"message":"144","line":53,"column":9,"nodeType":"145","messageId":"146","endLine":61,"endColumn":10},{"ruleId":"147","severity":1,"message":"148","line":80,"column":6,"nodeType":"149","endLine":80,"endColumn":8,"suggestions":"158"},{"ruleId":"126","severity":1,"message":"142","line":10,"column":10,"nodeType":"128","messageId":"129","endLine":10,"endColumn":14},{"ruleId":"143","severity":1,"message":"144","line":45,"column":9,"nodeType":"145","messageId":"146","endLine":51,"endColumn":10},{"ruleId":"147","severity":1,"message":"148","line":70,"column":6,"nodeType":"149","endLine":70,"endColumn":8,"suggestions":"159"},{"ruleId":"126","severity":1,"message":"160","line":1,"column":17,"nodeType":"128","messageId":"129","endLine":1,"endColumn":25},"no-native-reassign",["161"],"no-negated-in-lhs",["162"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-unused-vars","'Container' is defined but never used.","Identifier","unusedVar","'Col' is defined but never used.","'Row' is defined but never used.","'db' is assigned a value but never used.",["161"],["162"],"react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","JSXAttribute","jsx-a11y/iframe-has-title","<iframe> elements must have a unique title property.","react/jsx-no-duplicate-props","No duplicate props allowed","'user' is assigned a value but never used.","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'authListener'. Either include it or remove the dependency array.","ArrayExpression",["163"],"'VirtalSearchBox' is assigned a value but never used.","'query' is assigned a value but never used.","no-useless-rename","Destructuring assignment isAuth unnecessarily renamed.","Property","unnecessarilyRenamed",{"range":"164","text":"165"},["166"],["167"],"'useState' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"168","fix":"169"},[259,273],"isAuth",{"desc":"168","fix":"170"},{"desc":"168","fix":"171"},"Update the dependencies array to be: [authListener]",{"range":"172","text":"173"},{"range":"174","text":"173"},{"range":"175","text":"173"},[2044,2046],"[authListener]",[2961,2963],[2029,2031]]